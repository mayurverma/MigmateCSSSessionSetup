;******************************************************************************
; Scatter-file for Cortex-M0+ bare-metal example
;
; This file describes the memory-map of the AR0820 ASIC (rev 2).
;
;******************************************************************************
; Copyright 2018 ON Semiconductor. All rights reserved. This software and/or
; documentation is licensed by ON Semiconductor under limited terms and
; conditions. The terms and conditions pertaining to the software and/or
; documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
; ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Software").
; Do not use this software and/or documentation unless you have carefully read
; and you agree to the limited terms and conditions. By using this software
; and/or documentation, you agree to the limited terms and conditions.
;******************************************************************************

; This scatter-file places the vector table, application code, data, stacks and heap
; at suitable addresses in the Cortex-M0+ memory map.

;
; AR0820 rev2 supports 256 Kbytes of ROM
;
ROM_REGION 0x00000000 0x40000
{
  ; The vectors are placed at the base of the ROM
  VECTORS +0 0xC0    		; maximum of 48 exceptions (48*4 bytes == 192 == 0xC0)
  {
    * (VECTORS, +FIRST)
  }

  CODE 0xC0 0x3FF40
  {
    * (+RO)           		; All program code, including library code
                      		; All read-only data
  }

  ;
  ; AR0820 rev2 supports 48 Kbytes of RAM
  ;

  ; The 48 Kbyte patch RAM region sits at the base of the data RAM. It is unused and uninitialized
  ; by the ROM code
  PATCH 0x20000000 EMPTY UNINIT 0xC000
  {
  }

  ; We allocate a nominal 4 Kbytes of data RAM
  ; Note as we run-from-ROM, data is copied into the data RAM by the start-up code
  DATA 0x2000C000 0x1000
  {
    * (+RW, +ZI)      ; All RW and ZI data
  }

  ; We allocate a nominal 8 Kbytes of heap
  ; - the heap is uninitialized as we assume its contents won't be read until they have
  ;   been written
  HEAP 0x2000D000 EMPTY UNINIT 0x2000
  {
  }

  ; The Main Stack lives at the top of the available 64 Kbytes
  ; We reserve 4 Kbytes for the stack
  ; - its contents must be initialixed by the start-up code
  MAIN_STACK 0x2000F000 EMPTY UNINIT 0x1000
  {
  }

  ; Control registers
  ; - note this region contains registers so its contents must be uninitialized
  ICORE_REGISTERS 0x3FFF0000 EMPTY UNINIT 0x1000
  {
  }

  ; Shared-memory with the Host (via I2C)
  ; - note this region is ECC-protected, and can be read by host, so its contents
  ;   must be initialized by the start-up code
  SHARED_MEMORY 0x3FFF1000 EMPTY UNINIT 0x1000
  {
  }
}

