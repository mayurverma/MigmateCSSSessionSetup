#ifndef CRYPTO_ICORE_H
#define CRYPTO_ICORE_H
//***********************************************************************************
/// \file
///
/// Hardware block register definitions.
///
//***********************************************************************************
// Copyright 2018 ON Semiconductor.  All rights reserved.
//
// This software and/or documentation is licensed by ON Semiconductor under limited
// terms and conditions. The terms and conditions pertaining to the software and/or
// documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
// ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Software").
// Do not use this software and/or documentation unless you have carefully read and
// you agree to the limited terms and conditions. By using this software and/or
// documentation, you agree to the limited terms and conditions.
//***********************************************************************************

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// DO NOT EDIT - This file is auto-generated by the generate_headers.py script
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//------------------------------------------------------------------------------
//                                  Constants
//------------------------------------------------------------------------------

// Register address definitions (offsets relative to register base)

#define CRYPTO_ICORE_COMMAND                               (CRYPTO_ICORE_REG_BASE + 0x0000U)
#define CRYPTO_ICORE_CHECKPOINT                            (CRYPTO_ICORE_REG_BASE + 0x0004U)
#define CRYPTO_ICORE_PAUSEPOINT                            (CRYPTO_ICORE_REG_BASE + 0x0008U)
#define CRYPTO_ICORE_BOOTOPTIONS                           (CRYPTO_ICORE_REG_BASE + 0x000CU)
#define CRYPTO_ICORE_CRYPTOERROR                           (CRYPTO_ICORE_REG_BASE + 0x0010U)
#define CRYPTO_ICORE_INFO                                  (CRYPTO_ICORE_REG_BASE + 0x0014U)
#define CRYPTO_ICORE_PAGE                                  (CRYPTO_ICORE_REG_BASE + 0x0018U)

// Register field definitions

#define CRYPTO_ICORE_COMMAND_RESULT__SIZE                  15U
#define CRYPTO_ICORE_COMMAND_RESULT__SHIFT                 0U
#define CRYPTO_ICORE_COMMAND_RESULT__MASK                  (((uint32_t)((1UL << CRYPTO_ICORE_COMMAND_RESULT__SIZE) - 1U)) << CRYPTO_ICORE_COMMAND_RESULT__SHIFT)

#define CRYPTO_ICORE_COMMAND_DOORBELL__SIZE                1U
#define CRYPTO_ICORE_COMMAND_DOORBELL__SHIFT               15U
#define CRYPTO_ICORE_COMMAND_DOORBELL__MASK                (((uint32_t)((1UL << CRYPTO_ICORE_COMMAND_DOORBELL__SIZE) - 1U)) << CRYPTO_ICORE_COMMAND_DOORBELL__SHIFT)

#define CRYPTO_ICORE_CHECKPOINT_CHECKPOINT__SIZE           15U
#define CRYPTO_ICORE_CHECKPOINT_CHECKPOINT__SHIFT          0U
#define CRYPTO_ICORE_CHECKPOINT_CHECKPOINT__MASK           (((uint32_t)((1UL << CRYPTO_ICORE_CHECKPOINT_CHECKPOINT__SIZE) - 1U)) << CRYPTO_ICORE_CHECKPOINT_CHECKPOINT__SHIFT)

#define CRYPTO_ICORE_CHECKPOINT_FATAL_ERROR__SIZE          1U
#define CRYPTO_ICORE_CHECKPOINT_FATAL_ERROR__SHIFT         15U
#define CRYPTO_ICORE_CHECKPOINT_FATAL_ERROR__MASK          (((uint32_t)((1UL << CRYPTO_ICORE_CHECKPOINT_FATAL_ERROR__SIZE) - 1U)) << CRYPTO_ICORE_CHECKPOINT_FATAL_ERROR__SHIFT)

#define CRYPTO_ICORE_PAUSEPOINT_PAUSEPOINT__SIZE           15U
#define CRYPTO_ICORE_PAUSEPOINT_PAUSEPOINT__SHIFT          0U
#define CRYPTO_ICORE_PAUSEPOINT_PAUSEPOINT__MASK           (((uint32_t)((1UL << CRYPTO_ICORE_PAUSEPOINT_PAUSEPOINT__SIZE) - 1U)) << CRYPTO_ICORE_PAUSEPOINT_PAUSEPOINT__SHIFT)

#define CRYPTO_ICORE_PAUSEPOINT_PAUSED__SIZE               1U
#define CRYPTO_ICORE_PAUSEPOINT_PAUSED__SHIFT              15U
#define CRYPTO_ICORE_PAUSEPOINT_PAUSED__MASK               (((uint32_t)((1UL << CRYPTO_ICORE_PAUSEPOINT_PAUSED__SIZE) - 1U)) << CRYPTO_ICORE_PAUSEPOINT_PAUSED__SHIFT)

#define CRYPTO_ICORE_BOOTOPTIONS_BOOTOPTIONS__SIZE         32U
#define CRYPTO_ICORE_BOOTOPTIONS_BOOTOPTIONS__SHIFT        0U
#define CRYPTO_ICORE_BOOTOPTIONS_BOOTOPTIONS__MASK         (((uint32_t)((1UL << CRYPTO_ICORE_BOOTOPTIONS_BOOTOPTIONS__SIZE) - 1U)) << CRYPTO_ICORE_BOOTOPTIONS_BOOTOPTIONS__SHIFT)

#define CRYPTO_ICORE_CRYPTOERROR_FAULT_CONTEXT__SIZE       10U
#define CRYPTO_ICORE_CRYPTOERROR_FAULT_CONTEXT__SHIFT      0U
#define CRYPTO_ICORE_CRYPTOERROR_FAULT_CONTEXT__MASK       (((uint32_t)((1UL << CRYPTO_ICORE_CRYPTOERROR_FAULT_CONTEXT__SIZE) - 1U)) << CRYPTO_ICORE_CRYPTOERROR_FAULT_CONTEXT__SHIFT)

#define CRYPTO_ICORE_CRYPTOERROR_FAULT_CODE__SIZE          6U
#define CRYPTO_ICORE_CRYPTOERROR_FAULT_CODE__SHIFT         10U
#define CRYPTO_ICORE_CRYPTOERROR_FAULT_CODE__MASK          (((uint32_t)((1UL << CRYPTO_ICORE_CRYPTOERROR_FAULT_CODE__SIZE) - 1U)) << CRYPTO_ICORE_CRYPTOERROR_FAULT_CODE__SHIFT)

#define CRYPTO_ICORE_INFO_INFO__SIZE                       16U
#define CRYPTO_ICORE_INFO_INFO__SHIFT                      0U
#define CRYPTO_ICORE_INFO_INFO__MASK                       (((uint32_t)((1UL << CRYPTO_ICORE_INFO_INFO__SIZE) - 1U)) << CRYPTO_ICORE_INFO_INFO__SHIFT)

#define CRYPTO_ICORE_PAGE_PAGE_BITS__SIZE                  2U
#define CRYPTO_ICORE_PAGE_PAGE_BITS__SHIFT                 0U
#define CRYPTO_ICORE_PAGE_PAGE_BITS__MASK                  (((uint32_t)((1UL << CRYPTO_ICORE_PAGE_PAGE_BITS__SIZE) - 1U)) << CRYPTO_ICORE_PAGE_PAGE_BITS__SHIFT)


//------------------------------------------------------------------------------
//                                  Types
//------------------------------------------------------------------------------

typedef struct
{
    __IOM uint32_t command;
    __IOM uint32_t checkpoint;
    __IOM uint32_t pausepoint;
    __IOM uint32_t bootoptions;
    __IOM uint32_t cryptoerror;
    __IOM uint32_t info;
    __IM  uint32_t page;
} CRYPTO_ICORE_REGS_T;

#endif /* CRYPTO_ICORE_H */
