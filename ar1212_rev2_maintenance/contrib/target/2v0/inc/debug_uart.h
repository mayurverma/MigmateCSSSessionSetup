#ifndef DEBUG_UART_H
#define DEBUG_UART_H
//***********************************************************************************
/// \file
///
/// Hardware block register definitions.
///
//***********************************************************************************
// Copyright 2018 ON Semiconductor.  All rights reserved.
//
// This software and/or documentation is licensed by ON Semiconductor under limited
// terms and conditions. The terms and conditions pertaining to the software and/or
// documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
// ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Software").
// Do not use this software and/or documentation unless you have carefully read and
// you agree to the limited terms and conditions. By using this software and/or
// documentation, you agree to the limited terms and conditions.
//***********************************************************************************

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// DO NOT EDIT - This file is auto-generated by the generate_headers.py script
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//------------------------------------------------------------------------------
//                                  Constants
//------------------------------------------------------------------------------

// Register address definitions (offsets relative to register base)

#define DEBUG_UART_DATA                                    (DEBUG_UART_REG_BASE + 0x0000U)
#define DEBUG_UART_STATE                                   (DEBUG_UART_REG_BASE + 0x0004U)
#define DEBUG_UART_CTRL                                    (DEBUG_UART_REG_BASE + 0x0008U)
#define DEBUG_UART_INTSTATUS_INTCLR                        (DEBUG_UART_REG_BASE + 0x000CU)
#define DEBUG_UART_BAUDDIV                                 (DEBUG_UART_REG_BASE + 0x0010U)
#define DEBUG_UART_PID4                                    (DEBUG_UART_REG_BASE + 0x0FD0U)
#define DEBUG_UART_PID0                                    (DEBUG_UART_REG_BASE + 0x0FE0U)
#define DEBUG_UART_PID1                                    (DEBUG_UART_REG_BASE + 0x0FE4U)
#define DEBUG_UART_PID2                                    (DEBUG_UART_REG_BASE + 0x0FE8U)
#define DEBUG_UART_PID3                                    (DEBUG_UART_REG_BASE + 0x0FECU)
#define DEBUG_UART_CID0                                    (DEBUG_UART_REG_BASE + 0x0FF0U)
#define DEBUG_UART_CID1                                    (DEBUG_UART_REG_BASE + 0x0FF4U)
#define DEBUG_UART_CID2                                    (DEBUG_UART_REG_BASE + 0x0FF8U)
#define DEBUG_UART_CID3                                    (DEBUG_UART_REG_BASE + 0x0FFCU)

// Register field definitions

#define DEBUG_UART_DATA_DATA__SIZE                         8U
#define DEBUG_UART_DATA_DATA__SHIFT                        0U
#define DEBUG_UART_DATA_DATA__MASK                         (((uint32_t)((1UL << DEBUG_UART_DATA_DATA__SIZE) - 1U)) << DEBUG_UART_DATA_DATA__SHIFT)

#define DEBUG_UART_STATE_TX_BUFF_FULL__SIZE                1U
#define DEBUG_UART_STATE_TX_BUFF_FULL__SHIFT               0U
#define DEBUG_UART_STATE_TX_BUFF_FULL__MASK                (((uint32_t)((1UL << DEBUG_UART_STATE_TX_BUFF_FULL__SIZE) - 1U)) << DEBUG_UART_STATE_TX_BUFF_FULL__SHIFT)

#define DEBUG_UART_STATE_RX_BUFF_FULL__SIZE                1U
#define DEBUG_UART_STATE_RX_BUFF_FULL__SHIFT               1U
#define DEBUG_UART_STATE_RX_BUFF_FULL__MASK                (((uint32_t)((1UL << DEBUG_UART_STATE_RX_BUFF_FULL__SIZE) - 1U)) << DEBUG_UART_STATE_RX_BUFF_FULL__SHIFT)

#define DEBUG_UART_STATE_TX_BUFF_OVERRUN__SIZE             1U
#define DEBUG_UART_STATE_TX_BUFF_OVERRUN__SHIFT            2U
#define DEBUG_UART_STATE_TX_BUFF_OVERRUN__MASK             (((uint32_t)((1UL << DEBUG_UART_STATE_TX_BUFF_OVERRUN__SIZE) - 1U)) << DEBUG_UART_STATE_TX_BUFF_OVERRUN__SHIFT)

#define DEBUG_UART_STATE_RX_BUFF_OVERRUN__SIZE             1U
#define DEBUG_UART_STATE_RX_BUFF_OVERRUN__SHIFT            3U
#define DEBUG_UART_STATE_RX_BUFF_OVERRUN__MASK             (((uint32_t)((1UL << DEBUG_UART_STATE_RX_BUFF_OVERRUN__SIZE) - 1U)) << DEBUG_UART_STATE_RX_BUFF_OVERRUN__SHIFT)

#define DEBUG_UART_CTRL_TX_EN__SIZE                        1U
#define DEBUG_UART_CTRL_TX_EN__SHIFT                       0U
#define DEBUG_UART_CTRL_TX_EN__MASK                        (((uint32_t)((1UL << DEBUG_UART_CTRL_TX_EN__SIZE) - 1U)) << DEBUG_UART_CTRL_TX_EN__SHIFT)

#define DEBUG_UART_CTRL_RX_EN__SIZE                        1U
#define DEBUG_UART_CTRL_RX_EN__SHIFT                       1U
#define DEBUG_UART_CTRL_RX_EN__MASK                        (((uint32_t)((1UL << DEBUG_UART_CTRL_RX_EN__SIZE) - 1U)) << DEBUG_UART_CTRL_RX_EN__SHIFT)

#define DEBUG_UART_CTRL_TX_INT_EN__SIZE                    1U
#define DEBUG_UART_CTRL_TX_INT_EN__SHIFT                   2U
#define DEBUG_UART_CTRL_TX_INT_EN__MASK                    (((uint32_t)((1UL << DEBUG_UART_CTRL_TX_INT_EN__SIZE) - 1U)) << DEBUG_UART_CTRL_TX_INT_EN__SHIFT)

#define DEBUG_UART_CTRL_RX_INT_EN__SIZE                    1U
#define DEBUG_UART_CTRL_RX_INT_EN__SHIFT                   3U
#define DEBUG_UART_CTRL_RX_INT_EN__MASK                    (((uint32_t)((1UL << DEBUG_UART_CTRL_RX_INT_EN__SIZE) - 1U)) << DEBUG_UART_CTRL_RX_INT_EN__SHIFT)

#define DEBUG_UART_CTRL_TX_OVERRUN_INT_EN__SIZE            1U
#define DEBUG_UART_CTRL_TX_OVERRUN_INT_EN__SHIFT           4U
#define DEBUG_UART_CTRL_TX_OVERRUN_INT_EN__MASK            (((uint32_t)((1UL << DEBUG_UART_CTRL_TX_OVERRUN_INT_EN__SIZE) - 1U)) << DEBUG_UART_CTRL_TX_OVERRUN_INT_EN__SHIFT)

#define DEBUG_UART_CTRL_RX_OVERRUN_INT_EN__SIZE            1U
#define DEBUG_UART_CTRL_RX_OVERRUN_INT_EN__SHIFT           5U
#define DEBUG_UART_CTRL_RX_OVERRUN_INT_EN__MASK            (((uint32_t)((1UL << DEBUG_UART_CTRL_RX_OVERRUN_INT_EN__SIZE) - 1U)) << DEBUG_UART_CTRL_RX_OVERRUN_INT_EN__SHIFT)

#define DEBUG_UART_CTRL_HS_TEST_MODE__SIZE                 1U
#define DEBUG_UART_CTRL_HS_TEST_MODE__SHIFT                6U
#define DEBUG_UART_CTRL_HS_TEST_MODE__MASK                 (((uint32_t)((1UL << DEBUG_UART_CTRL_HS_TEST_MODE__SIZE) - 1U)) << DEBUG_UART_CTRL_HS_TEST_MODE__SHIFT)

#define DEBUG_UART_INTSTATUS_INTCLR_TX_INT__SIZE           1U
#define DEBUG_UART_INTSTATUS_INTCLR_TX_INT__SHIFT          0U
#define DEBUG_UART_INTSTATUS_INTCLR_TX_INT__MASK           (((uint32_t)((1UL << DEBUG_UART_INTSTATUS_INTCLR_TX_INT__SIZE) - 1U)) << DEBUG_UART_INTSTATUS_INTCLR_TX_INT__SHIFT)

#define DEBUG_UART_INTSTATUS_INTCLR_RX_INT__SIZE           1U
#define DEBUG_UART_INTSTATUS_INTCLR_RX_INT__SHIFT          1U
#define DEBUG_UART_INTSTATUS_INTCLR_RX_INT__MASK           (((uint32_t)((1UL << DEBUG_UART_INTSTATUS_INTCLR_RX_INT__SIZE) - 1U)) << DEBUG_UART_INTSTATUS_INTCLR_RX_INT__SHIFT)

#define DEBUG_UART_INTSTATUS_INTCLR_TX_OVERRUN_INT__SIZE   1U
#define DEBUG_UART_INTSTATUS_INTCLR_TX_OVERRUN_INT__SHIFT  2U
#define DEBUG_UART_INTSTATUS_INTCLR_TX_OVERRUN_INT__MASK   (((uint32_t)((1UL << DEBUG_UART_INTSTATUS_INTCLR_TX_OVERRUN_INT__SIZE) - 1U)) << DEBUG_UART_INTSTATUS_INTCLR_TX_OVERRUN_INT__SHIFT)

#define DEBUG_UART_INTSTATUS_INTCLR_RX_OVERRUN_INT__SIZE   1U
#define DEBUG_UART_INTSTATUS_INTCLR_RX_OVERRUN_INT__SHIFT  3U
#define DEBUG_UART_INTSTATUS_INTCLR_RX_OVERRUN_INT__MASK   (((uint32_t)((1UL << DEBUG_UART_INTSTATUS_INTCLR_RX_OVERRUN_INT__SIZE) - 1U)) << DEBUG_UART_INTSTATUS_INTCLR_RX_OVERRUN_INT__SHIFT)

#define DEBUG_UART_BAUDDIV_BAUDDIV__SIZE                   20U
#define DEBUG_UART_BAUDDIV_BAUDDIV__SHIFT                  0U
#define DEBUG_UART_BAUDDIV_BAUDDIV__MASK                   (((uint32_t)((1UL << DEBUG_UART_BAUDDIV_BAUDDIV__SIZE) - 1U)) << DEBUG_UART_BAUDDIV_BAUDDIV__SHIFT)

#define DEBUG_UART_PID4_JEP106_C_CODE__SIZE                4U
#define DEBUG_UART_PID4_JEP106_C_CODE__SHIFT               0U
#define DEBUG_UART_PID4_JEP106_C_CODE__MASK                (((uint32_t)((1UL << DEBUG_UART_PID4_JEP106_C_CODE__SIZE) - 1U)) << DEBUG_UART_PID4_JEP106_C_CODE__SHIFT)

#define DEBUG_UART_PID4_BLOCK_COUNT__SIZE                  4U
#define DEBUG_UART_PID4_BLOCK_COUNT__SHIFT                 4U
#define DEBUG_UART_PID4_BLOCK_COUNT__MASK                  (((uint32_t)((1UL << DEBUG_UART_PID4_BLOCK_COUNT__SIZE) - 1U)) << DEBUG_UART_PID4_BLOCK_COUNT__SHIFT)

#define DEBUG_UART_PID0_PART_NO_7_0__SIZE                  8U
#define DEBUG_UART_PID0_PART_NO_7_0__SHIFT                 0U
#define DEBUG_UART_PID0_PART_NO_7_0__MASK                  (((uint32_t)((1UL << DEBUG_UART_PID0_PART_NO_7_0__SIZE) - 1U)) << DEBUG_UART_PID0_PART_NO_7_0__SHIFT)

#define DEBUG_UART_PID1_PART_NO_11_8__SIZE                 4U
#define DEBUG_UART_PID1_PART_NO_11_8__SHIFT                0U
#define DEBUG_UART_PID1_PART_NO_11_8__MASK                 (((uint32_t)((1UL << DEBUG_UART_PID1_PART_NO_11_8__SIZE) - 1U)) << DEBUG_UART_PID1_PART_NO_11_8__SHIFT)

#define DEBUG_UART_PID1_JEP106_ID_3_0__SIZE                4U
#define DEBUG_UART_PID1_JEP106_ID_3_0__SHIFT               4U
#define DEBUG_UART_PID1_JEP106_ID_3_0__MASK                (((uint32_t)((1UL << DEBUG_UART_PID1_JEP106_ID_3_0__SIZE) - 1U)) << DEBUG_UART_PID1_JEP106_ID_3_0__SHIFT)

#define DEBUG_UART_PID2_JEP106_ID_6_4__SIZE                3U
#define DEBUG_UART_PID2_JEP106_ID_6_4__SHIFT               0U
#define DEBUG_UART_PID2_JEP106_ID_6_4__MASK                (((uint32_t)((1UL << DEBUG_UART_PID2_JEP106_ID_6_4__SIZE) - 1U)) << DEBUG_UART_PID2_JEP106_ID_6_4__SHIFT)

#define DEBUG_UART_PID2_JEDEC_USED__SIZE                   1U
#define DEBUG_UART_PID2_JEDEC_USED__SHIFT                  3U
#define DEBUG_UART_PID2_JEDEC_USED__MASK                   (((uint32_t)((1UL << DEBUG_UART_PID2_JEDEC_USED__SIZE) - 1U)) << DEBUG_UART_PID2_JEDEC_USED__SHIFT)

#define DEBUG_UART_PID2_REVISION__SIZE                     4U
#define DEBUG_UART_PID2_REVISION__SHIFT                    4U
#define DEBUG_UART_PID2_REVISION__MASK                     (((uint32_t)((1UL << DEBUG_UART_PID2_REVISION__SIZE) - 1U)) << DEBUG_UART_PID2_REVISION__SHIFT)

#define DEBUG_UART_PID3_CUSTOMER_MOD_NO__SIZE              4U
#define DEBUG_UART_PID3_CUSTOMER_MOD_NO__SHIFT             0U
#define DEBUG_UART_PID3_CUSTOMER_MOD_NO__MASK              (((uint32_t)((1UL << DEBUG_UART_PID3_CUSTOMER_MOD_NO__SIZE) - 1U)) << DEBUG_UART_PID3_CUSTOMER_MOD_NO__SHIFT)

#define DEBUG_UART_PID3_ECO_REV_NO__SIZE                   4U
#define DEBUG_UART_PID3_ECO_REV_NO__SHIFT                  4U
#define DEBUG_UART_PID3_ECO_REV_NO__MASK                   (((uint32_t)((1UL << DEBUG_UART_PID3_ECO_REV_NO__SIZE) - 1U)) << DEBUG_UART_PID3_ECO_REV_NO__SHIFT)

#define DEBUG_UART_CID0_CID0__SIZE                         8U
#define DEBUG_UART_CID0_CID0__SHIFT                        0U
#define DEBUG_UART_CID0_CID0__MASK                         (((uint32_t)((1UL << DEBUG_UART_CID0_CID0__SIZE) - 1U)) << DEBUG_UART_CID0_CID0__SHIFT)

#define DEBUG_UART_CID1_CID1__SIZE                         8U
#define DEBUG_UART_CID1_CID1__SHIFT                        0U
#define DEBUG_UART_CID1_CID1__MASK                         (((uint32_t)((1UL << DEBUG_UART_CID1_CID1__SIZE) - 1U)) << DEBUG_UART_CID1_CID1__SHIFT)

#define DEBUG_UART_CID2_CID2__SIZE                         8U
#define DEBUG_UART_CID2_CID2__SHIFT                        0U
#define DEBUG_UART_CID2_CID2__MASK                         (((uint32_t)((1UL << DEBUG_UART_CID2_CID2__SIZE) - 1U)) << DEBUG_UART_CID2_CID2__SHIFT)

#define DEBUG_UART_CID3_CID3__SIZE                         8U
#define DEBUG_UART_CID3_CID3__SHIFT                        0U
#define DEBUG_UART_CID3_CID3__MASK                         (((uint32_t)((1UL << DEBUG_UART_CID3_CID3__SIZE) - 1U)) << DEBUG_UART_CID3_CID3__SHIFT)


//------------------------------------------------------------------------------
//                                  Types
//------------------------------------------------------------------------------

typedef struct
{
    __IOM uint32_t data;
    __IOM uint32_t state;
    __IOM uint32_t ctrl;
    __IOM uint32_t intstatus_intclr;
    __IOM uint32_t bauddiv;
    __IM  uint32_t reserved1[1007];
    __IM  uint32_t pid4;
    __IM  uint32_t reserved2[3];
    __IM  uint32_t pid0;
    __IM  uint32_t pid1;
    __IM  uint32_t pid2;
    __IM  uint32_t pid3;
    __IM  uint32_t cid0;
    __IM  uint32_t cid1;
    __IM  uint32_t cid2;
    __IM  uint32_t cid3;
} DEBUG_UART_REGS_T;

#endif /* DEBUG_UART_H */
