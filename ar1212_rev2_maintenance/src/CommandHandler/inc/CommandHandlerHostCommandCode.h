#ifndef COMMAND_HANDLER_HOST_COMMAND_CODE_H
#define COMMAND_HANDLER_HOST_COMMAND_CODE_H
//***********************************************************************************
/// \file
///
/// Host commands.
///
//***********************************************************************************
// Copyright 2018 ON Semiconductor.  All rights reserved.
//
// This software and/or documentation is licensed by ON Semiconductor under limited
// terms and conditions. The terms and conditions pertaining to the software and/or
// documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
// ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Software").
// Do not use this software and/or documentation unless you have carefully read and
// you agree to the limited terms and conditions. By using this software and/or
// documentation, you agree to the limited terms and conditions.
//***********************************************************************************

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// DO NOT EDIT - This file is auto-generated by the generate_commands.py script
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//------------------------------------------------------------------------------
//                                 Host Commands
//------------------------------------------------------------------------------

// *INDENT-OFF*

/// Host command codes
typedef enum
{
    HOST_COMMAND_CODE_NULL = 0x0000U,                         ///< (0x0000) Null command (default register value)

    HOST_COMMAND_CODE_GET_STATUS = 0x8000U,                   ///< (0x8000) Get CSS status (any phase)
    HOST_COMMAND_CODE_APPLY_DEBUG_ENTITLEMENT = 0x8001U,      ///< (0x8001) Enable a debug feature (Debug phase)
    HOST_COMMAND_CODE_AUTHORIZE_RMA = 0x8002U,                ///< (0x8002) Authorize life-cycle transition to RMA state (Debug phase)
    HOST_COMMAND_CODE_LOAD_PATCH_CHUNK = 0x8003U,             ///< (0x8003) Load a patch chunk (Debug/Patch phase)

    HOST_COMMAND_CODE_PROVISION_ASSET = 0x8010U,              ///< (0x8010) Provision an asset to the device and program to OTPM (Configure phase)
    HOST_COMMAND_CODE_SELF_TEST = 0x8011U,                    ///< (0x8011) Perform a self-test (Configure phase)
    HOST_COMMAND_CODE_GET_SENSOR_ID = 0x8012U,                ///< (0x8012) Retrieve the unique sensor identifier (Configure phase)

    HOST_COMMAND_CODE_GET_CERTIFICATES = 0x8020U,             ///< (0x8020) Retrieve public certificates for sensor authentication (Configure phase)
    HOST_COMMAND_CODE_SET_SESSION_KEYS = 0x8021U,             ///< (0x8021) Negotiate video authentication and control channel session keys using an ephemeral master secret (Configure phase)
    HOST_COMMAND_CODE_SET_PSK_SESSION_KEYS = 0x8022U,         ///< (0x8022) Negotiate video authentication and control channel session keys using a pre-shared master secret (Configure phase)
    HOST_COMMAND_CODE_SET_EPHEMERAL_MASTER_SECRET = 0x8023U,  ///< (0x8023) Set an ephemeral master secret (Configure phase)

    HOST_COMMAND_CODE_SET_VIDEO_AUTH_ROI = 0x8030U,           ///< (0x8030) Set the video authentication region-of-interest (Session phase)
    HOST_COMMAND_CODE_ENABLE_MONITORING = 0x8031U,            ///< (0x8031) Enable firmware monitoring (Session phase)

    HOST_COMMAND_CODE_OTPM_BLANK_CHECK = 0x8840U,             ///< (0x8840) Run a blank check on the OTPM (Configure stage)
    HOST_COMMAND_CODE_OTPM_VERIFY = 0x8841U,                  ///< (0x8841) Verify the integrity of the OTPM post-programming (Debug phase)

    HOST_COMMAND_CODE_DEPU_PROGRAM_OTPM = 0x8850U,            ///< (0x8850) Patched-in command to load and burn DEPU assets.

    HOST_COMMAND_CODE_DEBUG_GET_REGISTERS = 0x8860U,          ///< (0x8860) Patched-in debug command to read some registers.
    HOST_COMMAND_CODE_EXECUTE_DEBUG = 0x8F00U,                ///< (0x8F00) Verification Application general purpose debug command to extend test coverage
} HostCommandCodeT;

#endif /* COMMAND_HANDLER_HOST_COMMAND_CODE_H */

