#ifndef SRC__SYSTEMMGR__INC__SYSTEMMGR_FATAL_ERROR
#define SRC__SYSTEMMGR__INC__SYSTEMMGR_FATAL_ERROR
//***********************************************************************************
/// \file
///
/// Fatal error codes.
///
//***********************************************************************************
// Copyright 2018 ON Semiconductor.  All rights reserved.
//
// This software and/or documentation is licensed by ON Semiconductor under limited
// terms and conditions. The terms and conditions pertaining to the software and/or
// documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
// ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Software").
// Do not use this software and/or documentation unless you have carefully read and
// you agree to the limited terms and conditions. By using this software and/or
// documentation, you agree to the limited terms and conditions.
//***********************************************************************************

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// DO NOT EDIT - This file is auto-generated by the generate_fatal_errors.py script
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//------------------------------------------------------------------------------
//                               Fatal Error Codes
//------------------------------------------------------------------------------

// *INDENT-OFF*

/// Fatal error codes
typedef enum
{
    SYSTEM_MGR_FATAL_ERROR_NONE = 0x000U,                                                   ///< (0) None
    SYSTEM_MGR_FATAL_ERROR_HARD_FAULT = 0x001U,                                             ///< (1) Hard Fault exception occurred
    SYSTEM_MGR_FATAL_ERROR_UNHANDLED_EVENT = 0x002U,                                        ///< (2) An unsupported event was signalled
    SYSTEM_MGR_FATAL_ERROR_SYSTEM_MGR_DOORBELL_BAD_PHASE = 0x003U,                          ///< (3) Doorbell event happened in unexpected phase
    SYSTEM_MGR_FATAL_ERROR_INIT_FAILED = 0x004U,                                            ///< (4) Failed to initialize
    SYSTEM_MGR_FATAL_ERROR_PLATFORM_INIT_FAILED = 0x005U,                                   ///< (5) Platform-layer failed to initialize
    SYSTEM_MGR_FATAL_ERROR_EXCEPTION_INIT_FAILED = 0x006U,                                  ///< (6) Failed to init exceptions and interrupts
    SYSTEM_MGR_FATAL_ERROR_COMPONENT_INIT_FAILED = 0x007U,                                  ///< (7) Failed to init application components
    SYSTEM_MGR_FATAL_ERROR_SYSTEM_MGR_NO_PHASE_REENTRY = 0x008U,                            ///< (8) Should never re-enter the same phase
    SYSTEM_MGR_FATAL_ERROR_SYSTEM_MGR_SET_EVENT_INVALID = 0x009U,                           ///< (9) Event identifier should be valid
    SYSTEM_MGR_FATAL_ERROR_SYSTEM_MGR_REGISTER_DUMP_HANDLER_FAILED = 0x00AU,                ///< (10) Attempt to register Diag dump handler failed
    SYSTEM_MGR_FATAL_ERROR_SYSTEM_MGR_PHASE_INVALID = 0x00BU,                               ///< (11) Invalid phase requested for SystemMgrNotifyEnterPhase

    SYSTEM_MGR_FATAL_ERROR_COMMAND_HANDLER_BAD_PHASE = 0x010U,                              ///< (16) OnEntryPhase called with bad phase
    SYSTEM_MGR_FATAL_ERROR_COMMAND_HANDLER_ENABLE_DOORBELL_INTERRUPT_FAILED = 0x011U,       ///< (17) Not possible to enable mailbox interrupt
    SYSTEM_MGR_FATAL_ERROR_COMMAND_HANDLER_ENABLE_ICORE_ECC_DED_INTERRUPT_FAILED = 0x012U,  ///< (18) Not possible to enable ECC DED failure interrupt
    SYSTEM_MGR_FATAL_ERROR_COMMAND_HANDLER_CLEAR_ICORE_ECC_DED_INTERRUPT_FAILED = 0x013U,   ///< (19) Not possible to clear pending ECC DED failure interrupt
    SYSTEM_MGR_FATAL_ERROR_COMMAND_HANDLER_CLEAR_DOORBELL_INTERRUPT_FAILED = 0x014U,        ///< (20) Not possible to clear pending mailbox interrupt

    SYSTEM_MGR_FATAL_ERROR_HEALTH_MONITOR_BAD_PHASE = 0x020U,                               ///< (32) OnEntryPhase called with bad phase
    SYSTEM_MGR_FATAL_ERROR_HEALTH_MONITOR_GET_STATUS_BAD_COMMAND = 0x021U,                  ///< (33) Health Monitor expects GetStatus command code
    SYSTEM_MGR_FATAL_ERROR_HEALTH_MONITOR_ENABLE_MONITORING_BAD_COMMAND = 0x022U,           ///< (34) Health Monitor expects EnableMonitoring command code
    SYSTEM_MGR_FATAL_ERROR_HEALTH_MONITOR_GET_STACK_USED_SIZE_NULL_PTR = 0x023U,            ///< (35) Health Monitor NULL pointer passed to HealthMonitorGetStackUsedSizeLongWords()
    SYSTEM_MGR_FATAL_ERROR_HEALTH_MONITOR_GET_STACK_INFORMATION_ERROR = 0x024U,             ///< (36) Health Monitor call to InitMpuGetStackInformation() returned an error
    SYSTEM_MGR_FATAL_ERROR_HEALTH_MONITOR_REGISTER_CLOCK_CHANGE_NOTIFIER_FAILED = 0x025U,   ///< (37) Health Monitor call to SystemMgrRegisterClockSpeedChangeNotifier() returned an error
    SYSTEM_MGR_FATAL_ERROR_HEALTH_MONITOR_GOT_UNEXPECTED_CALL_TO_ON_CLOCK_CHANGE = 0x026U,  ///< (38) Health Monitor got unexpected (not allowed) call to HealthMonitorOnClockChange()
    SYSTEM_MGR_FATAL_ERROR_HEALTH_MONITOR_STACK_OVERRUN = 0x027U,                           ///< (39) Health Monitor detected that the stack is nearly full
    SYSTEM_MGR_FATAL_ERROR_HEALTH_MONITOR_VCORE_ERROR = 0x028U,                             ///< (40) Health Monitor detected an error in the Vcore
    SYSTEM_MGR_FATAL_ERROR_HEALTH_MONITOR_GET_VCORE_STATUS_NULL_PTR = 0x029U,               ///< (41) Health Monitor NULL pointer passed to HealthMonitorGetVCoreStatus()

    SYSTEM_MGR_FATAL_ERROR_LIFECYCLE_CRYPTO_CLOCK_GATING_FAULT = 0x030U,                    ///< (48) Clock Gating failure
    SYSTEM_MGR_FATAL_ERROR_LIFECYCLE_SEC_FILTER_FAULT = 0x031U,                             ///< (49) Fault when applying secure filter
    SYSTEM_MGR_FATAL_ERROR_LIFECYCLE_PRIV_FILTER_FAULT = 0x032U,                            ///< (50) Fault when applying privilege filter
    SYSTEM_MGR_FATAL_ERROR_LIFECYCLE_RETRIEVAL_FAULT = 0x033U,                              ///< (51) Failed to retrieve lifecycle state
    SYSTEM_MGR_FATAL_ERROR_LIFECYCLE_OTPM_FAULT = 0x034U,                                   ///< (52) OTPM error during hardware initialization
    SYSTEM_MGR_FATAL_ERROR_LIFECYCLE_MGR_BAD_PHASE = 0x035U,                                ///< (53) OnEntryPhase called with bad phase
    SYSTEM_MGR_FATAL_ERROR_LIFECYCLE_MGR_APPLY_DEBUG_ENTITLEMENT_BAD_COMMAND = 0x036U,      ///< (54) LifecycleMgrOnApplyDebugEntitlement received invalid command
    SYSTEM_MGR_FATAL_ERROR_LIFECYCLE_MGR_APPLY_DEBUG_ENTITLEMENT_BAD_PARAM = 0x037U,        ///< (55) LifecycleMgrOnApplyDebugEntitlement received invalid parameter
    SYSTEM_MGR_FATAL_ERROR_LIFECYCLE_MGR_CC312_INIT_FAILED = 0x038U,                        ///< (56) Lifecycle Manager failure when entering phase SYSTEM_MGR_PHASE_DEBUG
    SYSTEM_MGR_FATAL_ERROR_LIFECYCLE_MGR_CC312_CONFIG_FAILED = 0x039U,                      ///< (57) Lifecycle Manager failure when entering phase SYSTEM_MGR_PHASE_CONFIGURE
    SYSTEM_MGR_FATAL_ERROR_LIFECYCLE_MGR_APPLY_DEBUG_ENTITLEMENT_RMA_PRESENTED = 0x03AU,    ///< (58) LifecycleMgrOnApplyDebugEntitlement received a RMA certificate

    SYSTEM_MGR_FATAL_ERROR_SHARED_RAM_ECCDED_FAILED = 0x040U,                               ///< (64) ECC DED failure in Icore Shared-RAM

    SYSTEM_MGR_FATAL_ERROR_PATCH_MGR_ON_LOAD_PATCH_CHUNK_BAD_COMMAND = 0x050U,              ///< (80) Patch Manager command handling received invalid command
    SYSTEM_MGR_FATAL_ERROR_PATCH_MGR_HANDLE_COMMAND_BAD_PARAM = 0x051U,                     ///< (81) Patch Manager command handling  received NULL pointer
    SYSTEM_MGR_FATAL_ERROR_PATCH_MGR_INIT_FAILED = 0x052U,                                  ///< (82) Patch Manager failure on entry to PHASE_INITIALIZE

    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_GET_CERTIFICATES_BAD_COMMAND = 0x070U,               ///< (112) Session Manager expects GetCertificates command code
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_GET_CERTIFICATES_BAD_PARAMS = 0x071U,                ///< (113) Session Manager expects valid params ptr to GetCertificates command
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_SET_EPHEMERAL_MASTER_SECRET_BAD_COMMAND = 0x072U,    ///< (114) Session Manager expects SetEphemeralMasterSecret command code
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_SET_EPHEMERAL_MASTER_SECRET_BAD_PARAMS = 0x073U,     ///< (115) Session Manager expects valid params ptr to SetEphemeralMasterSecret command
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_SET_PSK_SESSION_KEY_BAD_COMMAND = 0x074U,            ///< (116) Session Manager expects SetPskSessionKey command code
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_SET_PSK_SESSION_KEY_BAD_PARAMS = 0x075U,             ///< (117) Session Manager expects valid params ptr to SetPskSessionKey command
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_SET_SESSION_KEY_BAD_COMMAND = 0x076U,                ///< (118) Session Manager expects SetSessionKey command code
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_SET_SESSION_KEY_BAD_PARAMS = 0x077U,                 ///< (119) Session Manager expects valid params ptr to SetSessionKey command
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_SET_VIDEO_AUTH_ROI_BAD_COMMAND = 0x078U,             ///< (120) Session Manager expects SetVideoAuthRoi command code
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_SET_VIDEO_AUTH_ROI_BAD_PARAMS = 0x079U,              ///< (121) Session Manager expects valid params ptr to SetVideoAuthRoi command
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_NVM_MASTERSECRET_BAD_KEY = 0x07AU,                   ///< (122) MasterSecret asset in NVM has invalid key type
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_NVM_MASTERSECRET_BAD_LENGTH = 0x07BU,                ///< (123) MasterSecret asset in NVM has invalid length
    SYSTEM_MGR_FATAL_ERROR_SESSION_MGR_DISABLE_VCORE_CLOCK_FAILED = 0x07CU,                 ///< (124) Session Manager failed to disable the Vcore clock during initialisation

    SYSTEM_MGR_FATAL_ERROR_UNUSED = 0x080U,                                                 ///< (128) Unused (was SysTickDrv)

    SYSTEM_MGR_FATAL_ERROR_PLATFORM_CRITICAL_SECTION_NESTING_NOT_ZERO = 0x090U,             ///< (144) Platform expects the critical section nesting to be non-zero

    SYSTEM_MGR_FATAL_ERROR_CC312_PAL_TRNG_PARAM_NOT_SET = 0x0A0U,                           ///< (160) CC312 PAL expects the calibrated TRNG parameters to be copied before

    SYSTEM_MGR_FATAL_ERROR_CRYPTO_MGR_GET_SENSOR_ID_BAD_ARGS = 0x0B0U,                      ///< (176) Crypto Manager detected wrong arguments in the GetSensorId function
    SYSTEM_MGR_FATAL_ERROR_CRYPTO_MGR_DERIVE_KEYS_BAD_ARGS = 0x0B1U,                        ///< (177) Crypto Manager detected wrong arguments in the derive keys function
    SYSTEM_MGR_FATAL_ERROR_CRYPTO_MGR_AUTHENTICATE_PATCH_CHUNK_BAD_ARGS = 0x0B2U,           ///< (178) Crypto Manager detected wrong arguments in the authenticate patch chunk function
    SYSTEM_MGR_FATAL_ERROR_CRYPTO_MGR_AUTHENTICATE_ASSET_BAD_ARGS = 0x0B3U,                 ///< (179) Crypto Manager detected wrong arguments in the authenticate asset function
    SYSTEM_MGR_FATAL_ERROR_CRYPTO_MGR_SELF_TEST_BAD_ARGS = 0x0B4U,                          ///< (180) Crypto Manager detected wrong arguments in the self test function
    SYSTEM_MGR_FATAL_ERROR_CRYPTO_MGR_RSA_DECRYPT_BAD_ARGS = 0x0B5U,                        ///< (181) Crypto Manager detected wrong arguments in the RSA decryption function
    SYSTEM_MGR_FATAL_ERROR_CRYPTO_MGR_AEAD_DECRYPT_BAD_ARGS = 0x0B6U,                       ///< (182) Crypto Manager detected wrong arguments in the AEAD decryption function
    SYSTEM_MGR_FATAL_ERROR_CRYPTO_MGR_RANDOM_GENERATOR_BAD_ARGS = 0x0B7U,                   ///< (183) Crypto Manager detected wrong arguments in the random gen function
    SYSTEM_MGR_FATAL_ERROR_CRYPTO_MGR_BAD_KEY_SIZE_PARAM = 0x0B8U,                          ///< (184) Crypto Manager detected invalid ptr argument to GetSymmetricKeySize function
    SYSTEM_MGR_FATAL_ERROR_CRYPTO_MGR_BAD_IS_CALLED_PARAM = 0x0B9U,                         ///< (185) Crypto Manager detected invalid ptr argument to GetSensorIdCalled function
    SYSTEM_MGR_FATAL_ERROR_CRYPTO_MGR_ON_PHASE_ENTRY_CONFIGURATION = 0x0BAU,                ///< (186) Crypto Manager detected a Fatal error during configuration

    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_BAD_PHASE = 0x0C0U,                                      ///< (192) NvmMgrOnPhaseEntry called with bad phase
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_OTPM_CONFIGURATION_FAILED = 0x0C1U,                      ///< (193) NVM Manager  configuration of OTPM driver failed
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_ASSET_BAD_ARGS = 0x0C2U,                            ///< (194) NVM Manager internal parameter passing error
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_FIRST_BAD_PARAM_CONTEXT = 0x0C3U,                   ///< (195) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_FIRST_BAD_PARAM_ASSET_ADDRESS = 0x0C4U,             ///< (196) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_FIRST_BAD_PARAM_ASSET_LENGTH = 0x0C5U,              ///< (197) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_FIRST_NOT_INITIALIZED = 0x0C6U,                     ///< (198) NVM manager component not initialized
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_NEXT_BAD_PARAM_CONTEXT = 0x0C7U,                    ///< (199) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_NEXT_BAD_PARAM_ASSET_ADDRESS = 0x0C8U,              ///< (200) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_NEXT_BAD_PARAM_ASSET_LENGTH = 0x0C9U,               ///< (201) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_NEXT_NOT_INITIALIZED = 0x0CAU,                      ///< (202) NVM manager component not initialized
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_NEXT_BAD_MAGIC = 0x0CBU,                            ///< (203) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_READ_ASSET_NOT_INITIALIZED = 0x0CCU,                     ///< (204) NVM manager component not initialized
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_READ_ASSET_BAD_PARAM_BUFFER = 0x0CDU,                    ///< (205) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_WRITE_ASSET_NOT_INITIALIZED = 0x0CEU,                    ///< (206) NVM manager component not initialized
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_WRITE_ASSET_BAD_PARAM_BUFFER = 0x0CFU,                   ///< (207) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_ASSET_BAD_PARAM_RECORD = 0x0D0U,                    ///< (208) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_ASSET_BAD_PARAM_START_ADDRESS = 0x0D1U,             ///< (209) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_FREE_SPACE_BAD_PARAM_START_ADDRESS = 0x0D2U,        ///< (210) NVM Manager unexpected NULL pointer passed into function
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_INIT_FAILED = 0x0D3U,                                    ///< (211) NVM Manager failure on entry to PHASE_INITIALIZE
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_OTPM_DRV_CONFIGURE_FAILED = 0x0D4U,                      ///< (212) NVM Manager failure from OTPM configuration
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_ON_CLOCK_CHANGE_ASSET_RETRIEVAL_FAILED = 0x0D5U,         ///< (213) NVM Manager failure from OTPM configuration
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_FREE_SPACE_LENGTH_NOT_ZERO_IN_EMPTY = 0x0D6U,       ///< (214) NVM Manager asset type empty does not have an associated zero length field
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_ASSET_LENGTH_NOT_ZERO_IN_EMPTY = 0x0D7U,            ///< (215) NVM Manager asset type empty does not have an associated zero length field
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_FREE_SPACE_BAD_RECORD_LENGTH = 0x0D8U,              ///< (216) NVM Manager, NvmMgrFindFreeSpace identified an invalid lentgh in a header record
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_ASSET_BAD_RECORD_LENGTH = 0x0D9U,                   ///< (217) NVM Manager, NvmMgrFindAsset identified an invalid lentgh in a header record
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_ASSET_BAD_PARAM_START_ADDRESS_VALUE = 0x0DAU,       ///< (218) NVM Manager, NvmMgrFindAsset called with address pointer value beyond valid range
    SYSTEM_MGR_FATAL_ERROR_NVM_MGR_FIND_FREE_SPACE_OTPM_READ_UNEXPECTED_ERROR = 0x0DBU,     ///< (219) NVM Manager, NvmMgrFindFreeSpace call to OtpmDrvRead() received unexpected error

    SYSTEM_MGR_FATAL_ERROR_ASSET_MGR_ON_PROVISION_ASSET_BAD_ARGS = 0x0E0U,                  ///< (224) Asset Manager unexpected bad arguments
    SYSTEM_MGR_FATAL_ERROR_ASSET_MGR_GET_PUBLIC_KEY_BAD_ARGS = 0x0E1U,                      ///< (225) Asset Manager unexpected bad arguments
    SYSTEM_MGR_FATAL_ERROR_ASSET_MGR_RETRIEVE_CERTIFICATE_BAD_ARGS = 0x0E2U,                ///< (226) Asset Manager unexpected bad arguments
    SYSTEM_MGR_FATAL_ERROR_ASSET_MGR_RETRIEVE_PRIVATE_KEY_BAD_ARGS = 0x0E3U,                ///< (227) Asset Manager unexpected bad arguments
    SYSTEM_MGR_FATAL_ERROR_ASSET_MGR_RETRIEVE_TRNG_BAD_ARGS = 0x0E4U,                       ///< (228) Asset Manager unexpected bad arguments
    SYSTEM_MGR_FATAL_ERROR_ASSET_MGR_RETRIEVE_PSK_BAD_ARGS = 0x0E5U,                        ///< (229) Asset Manager unexpected bad arguments
    SYSTEM_MGR_FATAL_ERROR_ASSET_MGR_RETRIEVE_OTPM_CONFIG_BAD_ARGS = 0x0E6U,                ///< (230) Asset Manager unexpected bad arguments

    SYSTEM_MGR_FATAL_ERROR_PATCH_DEBUG_BAD_COMMAND = 0x300U,                                ///< (768) Test Patch command handler received invalid command
    SYSTEM_MGR_FATAL_ERROR_PATCH_DEBUG_BAD_PARAM = 0x301U,                                  ///< (769) Test Patch command handler received NULL pointer
    SYSTEM_MGR_FATAL_ERROR_PATCH_DEBUG_FILL_STACK_ERROR = 0x302U,                           ///< (770) Test Patch, error when executing PatchFillStack()

    SYSTEM_MGR_FATAL_ERROR_DEPU_APP_BAD_COMMAND = 0x340U,                                   ///< (832) DEPU Application bad command code parameter
    SYSTEM_MGR_FATAL_ERROR_DEPU_APP_BAD_PARAM = 0x341U,                                     ///< (833) DEPU Application bad parameter passed into the function

    SYSTEM_MGR_FATAL_ERROR_VALIDATION_APP_BAD_COMMAND = 0x350U,                             ///< (848) Validation Application bad command code parameter

    SYSTEM_MGR_FATAL_ERROR_MAX = 0x3FFU,                                                    ///< (1023) Maximum fatal error code value
} SystemMgrFatalErrorT;

#endif /* SRC__SYSTEMMGR__INC__SYSTEMMGR_FATAL_ERROR */

