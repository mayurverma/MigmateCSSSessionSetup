Name,Value,Comment
NO_ACTION,0,No action
FILL_STACK,1,Fill stack
DISABLE_PATCH,2,Disable specific patch comparator 
ENABLE_PATCH,3,Enable specific patch comparator and associated it with new function
SWITCH_PATCH,4,Switch patch
NVM_FREE_SPACE_OFFSET,5,Get free space address
LIFECYCLE_MGR_SW_FATAL_ERROR,6,Execute software fatal error
TRIGGER_INTERRUPT,7,Enable and trigger Interrupt
SYS_INFO,8,Get Info value
SYS_TICK,9,Force Sys Tick
NEW_IRQ_HANDER,10,Install new handler for vector
RELOCATE_IRQ_VECTOR_TABLE,11,Relocate vector table to RAM
SET_WATCHDOG_TIMER_INTERVAL,12,Set watchdog/health monitor timer interval
CALCULATE_CHECKSUM,13,Call calculate checksum on contents of message buffer
FORCE_OTPM_ECC_DED,14,Set DED bit in OTPM error register
CC312_HAL_PAL_EMPTY,15,"Execute cc312 Hal Pal empty functions, check they exist and return correctly"
CC312_HAL_PAL_MEMORY,16,"Execute cc312 Hal Pal memory related functions, check they exist and return correctly"
CC312_HAL_PAL_OTPM_WRITE,17,Execute cc312 Hal Pal CC_BsvOTPWordWrite()
CC312_HAL_PAL_ABORT,18,Execute cc312 Hal Pal CC_PalAbort()
CC312_HAL_PAL_COMPARE,19,Execute cc312 Hal Pal CC_PalSecMemCmp()
SET_WATCHDOG_DANGER_ZONE_SIZE,20,Set watchdog/health monitor  danger zone size
LIFECYCLE_MGR_AUTHORIZE_RMA,21,Authorize RMA 
SYSTEM_DRV_GET_BOOT_OPTIONS,22,Get boot options flags
SYSTEM_MGR_PATCH_FUNCTIONS,23,Execute functions intended for patch support
SYSTEM_MGR_REQUEST_SHUTDOWN,24,Request system shutdown
SYSTEM_MGR_UNHANDLED_EVENT,25,Execute unhandled event handler
SYS_EXIT,26,Execute _sys_exit()
SYS_TTY_CHR,27,Execute _ttywrch()
NMI_HANDLER,28,Call to NMI_Handler()
RESERVED_HANDLER,29,Call to Reserved_Handler()
AESCMAC_STATUS,30,Modify return value for vcore status
BAD_FUNCTION,31,Generate a HardFault by calling a function without the Thumb bit set
UNALIGNED_ACCESS,32,Generate a HardFault via an unaligned access
PENDSV,33,Set the aborted flag and trigger PendSV
ILLEGAL_INSTRUCTION,34,Generate a HardFault via an illegal instruction
FW_LOCKUP,35,Call a debug function that contains an infinite loop. Used for generating a watchdog timeout
MPU_WRITE_START_ROM,36,Generate a HardFault via write to start of ROM
MPU_WRITE_END_ROM,37,Generate a HardFault via write to end of ROM
MPU_READ_END_ROM,38,Generate a HardFault via read past end of ROM
MPU_EXECUTE_END_ROM,39,Generate a HardFault via execute past end of ROM
MPU_EXECUTE_PATCH_RAM,40,Generate a HardFault via execute from patch RAM
MPU_EXECUTE_RAM,41,Generate a HardFault via execute from data RAM
MPU_READ_END_STACK,42,Generate a HardFault via read beyond the end of the stack
MPU_READ_STACK_GUARD,43,Generate a HardFault via read within the stack guard
MPU_EXECUTE_SHARED_MEM,44,Generate a HardFault via execute from ICore shared-memory
MPU_READ_END_SHARED_MEM,45,Generate a HardFault via read beyond the end of the shared-memory
MPU_EXECUTE_VCORE_ADDR,46,Generate a HardFault via execute from the VCore region
MPU_READ_END_VCORE_ADDR,47,Generate a HardFault via read beyond the end of the Vcore region
,,
ERROR_RANGE ,255,Error
