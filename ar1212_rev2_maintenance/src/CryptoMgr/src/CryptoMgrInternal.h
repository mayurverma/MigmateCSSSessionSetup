#if !defined(SRC__CRYPTOMGR__SRC__CRYPTOMGRINTERNAL_H)
#define      SRC__CRYPTOMGR__SRC__CRYPTOMGRINTERNAL_H

//***********************************************************************************
/// \file
/// CryptoMgrInternal.h
///
/// \addtogroup cryptomgr
///
/// Contains type and variable definitions internal to the cryptomgr component
///
/// @{
//***********************************************************************************
// Copyright 2018 ON Semiconductor.  All rights reserved.
//
// This software and/or documentation is licensed by ON Semiconductor under limited
// terms and conditions. The terms and conditions pertaining to the software and/or
// documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
// ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Software").
// Do not use this software and/or documentation unless you have carefully read and
// you agree to the limited terms and conditions. By using this software and/or
// documentation, you agree to the limited terms and conditions.
//
//***********************************************************************************

#include "Common.h"
#include "bsv_api.h"
#include "cc_asset_prov.h"
#include "mbedtls_cc_util_asset_prov.h"
#include "sha256_alt.h"
#include "rsa.h"
#include "cc_lib.h"
#include "ctr_drbg.h"
#include "entropy.h"
#include "ccm_alt.h"
#include "gcm_alt.h"
#include "mbedtls_cc_hkdf.h"
#include "LifecycleMgr.h"
#include "PatchMgr.h"
#include "SystemMgr.h"

//---------------------------------------------------------------------------------
//                                  Constants
//---------------------------------------------------------------------------------
#define CRYPTO_MGR_HKDF_INFO_AR0820R2_VALUE {0x41U, 0x52U, 0x30U, 0x38U, 0x32U, 0x30U, 0x52U, 0x32U}  ///< 'AR0820R2' encoded in bytes
#define CRYPTO_MGR_HKDF_INFO_AR0820R2_SIZE_BYTES (8U)                  ///< Size of CRYPTO_MGR_HKDF_INFO_AR0820R2_VALUE in bytes
#define CRYPTO_MGR_HKDF_INFO_SIZE_BYTES (sizeof(CryptoMgrHkdfInfoT))   ///< Size of the info parameter in HKDF
#define CRYPTO_MGR_HKDF_HOST_SALT_SIZE_BYTES (16U)                     ///< Size of the host salt used in HKDF
#define CRYPTO_MGR_HKDF_SENSOR_SALT_SIZE_BYTES (16U)                   ///< Size of the sensor salt used in HKDF
#define CRYPTO_MGR_HKDF_DERIVED_KEY_MAX_SIZE_BYTES (32U)               ///< Maximum size of the derived key

#define CRYPTO_MGR_AEAD_IV_NONCE_SIZE_BYTES (12U)                      ///< Size of the nonce used in AEAD decryption
#define CRYPTO_MGR_AEAD_TAG_SIZE_BYTES (16U)                           ///< Size of the tag used in AEAD decryption

//---------------------------------------------------------------------------------
//                                  Types
//---------------------------------------------------------------------------------
/// Status of Crypto Manager
typedef enum
{
    CRYPTO_MGR_UNINIT = 0U,      ///< Crypto Manager not initialized or not usable.
    CRYPTO_MGR_CONFIGURED = 1U,  ///< Crypto Manager initialized
} CryptoMgrStatusT;

/// Represent internal control and state (RND) used by Crypto Manager
typedef struct
{
    CryptoMgrStatusT status;                 ///< Status of Crypto manager to check if it has been initialized
    bool getSensorIdCalled;                  ///< Flags if the GetSensorId host command has been called successfully
    CCRndContext_t rndContext;               ///< Context needed to initialize CC library (CC_LibInit)
    mbedtls_ctr_drbg_context rndState;       ///< Context needed to initialize CC library (CC_LibInit)
    mbedtls_entropy_context mbedtlsEntropy;  ///< Context needed to initialize CC library (CC_LibInit)
} CryptoMgrT;

/// Represent the structure of the info given to the derivation function (hkdf)
typedef struct
{
    uint8_t sensorName[CRYPTO_MGR_HKDF_INFO_AR0820R2_SIZE_BYTES];   ///< Sensor name (8 characters) for the hkdf info
    uint16_t romVersion;                                            ///< Rom version for the hkdf info
    PatchMgrPatchVersionT patchVersion;                             ///< Patch version for the hkdf info
    CCHashResult_t sensorId;                                        ///< Sensor Id (256 bits) for the hkdf info
} CryptoMgrHkdfInfoT;

/// Represent the structure of the salt given to the derivation function (hkdf)
typedef struct
{
    uint8_t hostSalt[CRYPTO_MGR_HKDF_HOST_SALT_SIZE_BYTES];         ///< Salt portion generated by the host
    uint8_t sensorSalt[CRYPTO_MGR_HKDF_SENSOR_SALT_SIZE_BYTES];     ///< Salt portion generated by the FW
} CryptoMgrHkdfSaltT;

/// Represents the GetStatus host command response parameters
typedef struct
{
    CCHashResult_t uniqueId;            ///< The Unique identifier for the Sensor
} CryptoMgrGetSensorIdResponseParamsT;

//---------------------------------------------------------------------------------
//                                  Macros
//---------------------------------------------------------------------------------

//---------------------------------------------------------------------------------
//                                  Exports
//---------------------------------------------------------------------------------

/// Internal State / variables for the Crypto Mgr
extern CryptoMgrT cryptoMgr;
// Compresses a BSV error before reporting it in the info Register
extern void CryptoMgrReportBsvError(DiagCheckpointT const checkpoint, CCError_t const error);
// Compresses a mbedtls error before reporting it in the info Register
extern void CryptoMgrReportMbedTlsError(DiagCheckpointT const checkpoint, int32_t const error);
// Handles initialization of the CC312 runtime library at Configure phase.
extern ErrorT CryptoMgrOnConfigEntry(void);
// Handles finalization of the CC312 runtime library at Shutdown phase.
extern ErrorT CryptoMgrOnShutdownEntry(void);
// Gets the GetSensorID hash value
extern ErrorT CryptoMgrGetSensorId(CCHashResult_t sensorId);
// Increments by one a number represented by an array (little endian)
extern ErrorT CryptoMgrIncrementNumber(uint32_t const dataSizeBytes, uint8_t* const data);
// Check if the CryptoMgr has been initialized
extern ErrorT CryptoMgrCheckStatus(void);

/// @} endgroup cryptomgr

#endif  // !defined(SRC__CRYPTOMGR__SRC__CRYPTOMGRINTERNAL_H)

