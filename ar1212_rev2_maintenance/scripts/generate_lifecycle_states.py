#######################################################################################
# Copyright 2018 ON Semiconductor.  All rights reserved.
#
# This software and/or documentation is licensed by ON Semiconductor under limited
# terms and conditions.  The terms and conditions pertaining to the software and/or
# documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
# ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Softwar").
# Do not use this software and/or documentation unless you have carefully read and
# you agree to the limited terms and conditions.  By using this software and/or
# documentation, you agree to the limited terms and conditions.
########################################################################################
#
# Generates C and Python Lifecycle Manager states header files from a master CSV file
#
########################################################################################
import argparse
import csv
import os
import sys

class LifecycleMgrStateGenerator():
    """System Manager phase header generator class
    """

    C_HEADER = \
        '#if !defined(SRC__LIFECYCLEMGR__INC__LIFECYCLE_MGR_LIFECYCLE_STATE_H)\n' \
        '#define      SRC__LIFECYCLEMGR__INC__LIFECYCLE_MGR_LIFECYCLE_STATE_H\n' \
        '//***********************************************************************************\n' \
        '/// \\file\n' \
        '/// Lifecycle Manager Lifecycle States\n' \
        '///\n' \
        '/// \\addtogroup lifecyclemgr   Lifecycle Manager\n' \
        '/// @{\n' \
        '//***********************************************************************************\n' \
        '// Copyright 2018 ON Semiconductor.  All rights reserved.\n' \
        '//\n' \
        '// This software and/or documentation is licensed by ON Semiconductor under limited\n' \
        '// terms and conditions. The terms and conditions pertaining to the software and/or\n' \
        '// documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf\n' \
        '// ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Software").\n' \
        '// Do not use this software and/or documentation unless you have carefully read and\n' \
        '// you agree to the limited terms and conditions. By using this software and/or\n' \
        '// documentation, you agree to the limited terms and conditions.\n' \
        '//***********************************************************************************\n' \
        '\n' \
        '// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' \
        '// DO NOT EDIT - This file is auto-generated by the generate_lifecycle_states.py script\n' \
        '// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' \
        '\n' \
        '//------------------------------------------------------------------------------\n' \
        '//                           Lifecycle Manager States\n' \
        '//------------------------------------------------------------------------------\n' \
        '\n' \
        '// *INDENT-OFF*\n' \
        '\n' \
        '/// Lifecycle states\n' \
        'typedef enum\n' \
        '{\n'

    C_FOOTER = \
        '} LifecycleMgrLifecycleStateT;\n' \
        '\n' \
        '/// @} endgroup lifecyclemgr\n' \
        '#endif  // !defined(SRC__LIFECYCLEMGR__INC__LIFECYCLE_MGR_LIFECYCLE_STATE_H)\n' \
        '\n'

    PYTHON_HEADER = \
        '####################################################################################\n' \
        '# Copyright 2018 ON Semiconductor.  All rights reserved.\n' \
        '#\n' \
        '# This software and/or documentation is licensed by ON Semiconductor under limited\n' \
        '# terms and conditions. The terms and conditions pertaining to the software and/or\n' \
        '# documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf\n' \
        '# ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Software").\n' \
        '# Do not use this software and/or documentation unless you have carefully read and\n' \
        '# you agree to the limited terms and conditions. By using this software and/or\n' \
        '# documentation, you agree to the limited terms and conditions.\n' \
        '#\n' \
        '####################################################################################\n' \
        '\n' \
        '#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' \
        '# DO NOT EDIT - This file is auto-generated by the generate_lifecycle_states.py script\n' \
        '#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n' \
        '\n' \
        'from enum import IntEnum, unique\n' \
        '\n' \
        '@unique\n' \
        'class LifecycleState(IntEnum):\n' \
        '    """Lifecycle states enumeration."""\n'

    PYTHON_FOOTER = \
        '\n' \
        '    def __str__(self):\n' \
        '        return \'0x{:04X}:{}\'.format(self.value, self.name)\n' \
        '\n'

    def __init__(self, csv_filename, prefix, debug=False):
        self._csv_filename = csv_filename
        self._prefix = prefix
        self._debug = debug

    def validate(self):
        """Checks for duplicate lifecycle state values
        """
        if self._debug: print("Validating lifecycle state...")
        found_entries = list()

        with open(self._csv_filename, newline='') as csvfile:
            entries = csv.DictReader(csvfile)
            for row in entries:
                if "" != row['Name'].strip():
                    state_name = row['Name'].strip()
                    state_value = int(row['Value'].strip(), 16)

                    if self._debug: print("Evaluating lifecycle state: {}: {}".format(state_name, state_value))

                    # Look for a duplicate
                    for (existing_state_value, existing_state_name) in found_entries:
                        if existing_state_value == state_value:
                            raise Exception("Duplicate lifecycle state: {} duplicates {}\n".format(state_name, existing_state_name))

                    found_entries.append((state_value, state_name))

        if self._debug: print("All lifecycle states valid\n")

    def generate_c(self, filename):
        """Generates the C .h header file.
        """
        if self._debug:
            print("Generating C lifecycle states...")

        # Build the C lifecycle states content
        content = self.C_HEADER

        with open(self._csv_filename, newline='') as csvfile:
            entries = csv.DictReader(csvfile)
            next_state = 0
            for row in entries:
                if "" != row['Name'].strip():
                    if int(row['Value'].strip()) != next_state:
                        content += '\n'
                        next_state = int(row['Value'].strip()) + 1
                    else:
                        next_state += 1
                    nameValue = '{}_{} = 0x{:02X}U,'.format(self._prefix, row['Name'].strip(), int(row['Value'].strip()))
                    content += "    {:50s} ///< {}\n".format(nameValue, row['Comment'].strip())

        content += self.C_FOOTER

        # write the C lifecycle states content
        if self._debug: print("Writing {}...".format(filename))
        with open(filename, "wt", newline='\n') as ostream:
            ostream.write(content)

    def generate_python(self, filename):
        """Generates the Python .py header file.
        """
        if self._debug:
            print("Generating Python lifecycle states...")

        # Build the Python lifecycle states content
        content = self.PYTHON_HEADER

        with open(self._csv_filename, newline='') as csvfile:
            entries = csv.DictReader(csvfile)
            next_state = 0
            for row in entries:
                if "" != row['Name'].strip():
                    if int(row['Value'].strip()) != next_state:
                        content += '\n'
                        next_state = int(row['Value'].strip()) + 1
                    else:
                        next_state += 1
                    nameValue = '    {} = {}'.format(row['Name'].strip(), row['Value'].strip())
                    content += "{:15s}  # {}\n".format(nameValue, row['Comment'].strip())

        content += self.PYTHON_FOOTER

        # write the Python lifecycle states content
        if self._debug: print("Writing {}...".format(filename))
        with open(filename, "wt", newline='\n') as ostream:
            ostream.write(content)

# Create the argument parser
parser = argparse.ArgumentParser(prog='generate_lifecycle_states',
    description='Generate C and Python header files for Lifecycle Manager states')
parser.add_argument('-d', '--debug', default=False, action='store_true', help='Enable debug output')
parser.add_argument('-c', '--csvfile', required=True, help='Lifecycle Manager states master CSV file')
parser.add_argument('-o', '--output', required=True, help='Output directory for ASM and C header files')
parser.add_argument('-s', '--scripts', required=True, help='Output directory for Python scripts')
parser.add_argument('-v', '--validate', required=False, action='store_true', help='Validate lifecycle states')

# Parse the command line arguments
args = parser.parse_args()

generator = LifecycleMgrStateGenerator(args.csvfile, 'LIFECYCLE_MGR_LIFECYCLE_STATE', args.debug)
if args.validate:
    generator.validate()

# Generate C and Python lifecycle states header files
print('Generating lifecycle states...')
generator.generate_c(os.path.join(args.output, 'LifecycleMgrLifecycleState.h'))
generator.generate_python(os.path.join(args.scripts, 'lifecycle_state.py'))
