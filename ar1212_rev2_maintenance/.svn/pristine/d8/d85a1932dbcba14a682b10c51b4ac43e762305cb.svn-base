#######################################################################################
# Copyright 2018 ON Semiconductor.  All rights reserved.
#
# This software and/or documentation is licensed by ON Semiconductor under limited
# terms and conditions.  The terms and conditions pertaining to the software and/or
# documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
# ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Softwar").
# Do not use this software and/or documentation unless you have carefully read and
# you agree to the limited terms and conditions.  By using this software and/or
# documentation, you agree to the limited terms and conditions.
########################################################################################
#
# ASTyle options file for processing the C source files
#
# Options can have line-end comments e.g. --style=allman # this is a line-end comment
# Long options can be written without the preceeding '--' e.g. indent-switches
# Short options must have the preceeding '-' e.g. -t -p
# Short options can be concatenated together e.g. -M60Ucv
#
########################################################################################
-A1,    --style=allman             # Break the braces for one line blocks and break one line statements
-s4,    --indent=spaces=4          # Indent using spaces and replace tab with 4 spaces
-xk,    --attach-extern-c          # Attach braces to a braced extern "C" statement
-S,     --indent-switches          # Indent case labels relative to switch statement
-N,     --indent-namespaces        # Add extra indentation to namespace blocks
-xU,    --indent-after-parens      # Indent (instead of align) continuation lines following lines that contain an opening parenthesis '(' or assignment '='
-w,     --indent-preproc-define    # Indent preprocessor definitions ending with a backslash
-Y,     --indent-col1-comments     # Indent C++ comments beginning in column 1
-m0,    --min-conditional-indent   # Set the minimal indent that is added when a header is built of multiple lines
-p,     --pad-oper                 # Insert space padding around operators (this will also pad commas)
-H,     --pad-header               # Insert space padding between a header (e.g. if, for, while, ...) and the following parenthesis
-U,     --unpad-paren              # Unpad extra space padding around parens on the inside and outside
-k1,    --align-pointer=type       # Attach a pointer or reference operator (* or & or ^) to the variable type
-y,     --break-closing-braces     # Breaks closing headers (e.g. else, catch, ...) from their immediately preceeding closing braces
-xb,    --break-one-line-headers   # Break one line headers (e.g. if, while, else, ...) from statement residing on the same line
-j,     --add-braces               # Add braces to unbraced one line conditional statements (e.g. if, for, while, ...)
-xf,    --attach-return-type       # Attacth the return type to the function definition
-xh,    --attach-return-type-decl  # Attach the return type to the function declaration
-c,     --convert-tabs             # Convert tabs into spaces in the non-indentation part of the line
-xy,    --close-templates          # Closes whitespace between the ending angle brackets of template definitions
-xC120, --max-code-length=120      # Break a line if the code exceeds the number of characters
-xL,    --break-after-logical      # Break a line after a logical conditional statement
-z2,    --lineend=linux            # Force use of the specified line end style, windows (CRLF) or linux (LF)
