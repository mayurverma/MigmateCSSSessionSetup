#if !defined(SRC__VERIFICATIONAPP__SRC__VERIFICATION_APP_DEBUG_ID_H)
#define      SRC__VERIFICATIONAPP__SRC__VERIFICATION_APP_DEBUG_ID_H
//***********************************************************************************
/// \file
/// Debug Command public API - ids
///
/// \addtogroup verificationapp
/// @{
//***********************************************************************************
// Copyright 2019 ON Semiconductor.  All rights reserved.
//
// This software and/or documentation is licensed by ON Semiconductor under limited
// terms and conditions. The terms and conditions pertaining to the software and/or
// documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
// ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Software").
// Do not use this software and/or documentation unless you have carefully read and
// you agree to the limited terms and conditions. By using this software and/or
// documentation, you agree to the limited terms and conditions.
//***********************************************************************************

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// DO NOT EDIT - This file is auto-generated by the generate_system_phases.py script
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//------------------------------------------------------------------------------
//                             Debug command ids
//------------------------------------------------------------------------------

// *INDENT-OFF*

/// Command ids
typedef enum
{
    VERIFICATION_APP_DEBUG_ID_NO_ACTION = 0x00U, ///< No action
    VERIFICATION_APP_DEBUG_ID_FILL_STACK = 0x01U, ///< Fill stack
    VERIFICATION_APP_DEBUG_ID_DISABLE_PATCH = 0x02U, ///< Disable specific patch comparator
    VERIFICATION_APP_DEBUG_ID_ENABLE_PATCH = 0x03U, ///< Enable specific patch comparator and associated it with new function
    VERIFICATION_APP_DEBUG_ID_SWITCH_PATCH = 0x04U, ///< Switch patch
    VERIFICATION_APP_DEBUG_ID_NVM_FREE_SPACE_OFFSET = 0x05U, ///< Get free space address
    VERIFICATION_APP_DEBUG_ID_LIFECYCLE_MGR_SW_FATAL_ERROR = 0x06U, ///< Execute software fatal error
    VERIFICATION_APP_DEBUG_ID_TRIGGER_INTERRUPT = 0x07U, ///< Enable and trigger Interrupt
    VERIFICATION_APP_DEBUG_ID_SYS_INFO = 0x08U, ///< Get Info value
    VERIFICATION_APP_DEBUG_ID_SYS_TICK = 0x09U, ///< Force Sys Tick
    VERIFICATION_APP_DEBUG_ID_NEW_IRQ_HANDER = 0x0AU, ///< Install new handler for vector
    VERIFICATION_APP_DEBUG_ID_RELOCATE_IRQ_VECTOR_TABLE = 0x0BU, ///< Relocate vector table to RAM
    VERIFICATION_APP_DEBUG_ID_SET_WATCHDOG_TIMER_INTERVAL = 0x0CU, ///< Set watchdog/health monitor timer interval
    VERIFICATION_APP_DEBUG_ID_CALCULATE_CHECKSUM = 0x0DU, ///< Call calculate checksum on contents of message buffer
    VERIFICATION_APP_DEBUG_ID_FORCE_OTPM_ECC_DED = 0x0EU, ///< Set DED bit in OTPM error register
    VERIFICATION_APP_DEBUG_ID_CC312_HAL_PAL_EMPTY = 0x0FU, ///< Execute cc312 Hal Pal empty functions, check they exist and return correctly
    VERIFICATION_APP_DEBUG_ID_CC312_HAL_PAL_MEMORY = 0x10U, ///< Execute cc312 Hal Pal memory related functions, check they exist and return correctly
    VERIFICATION_APP_DEBUG_ID_CC312_HAL_PAL_OTPM_WRITE = 0x11U, ///< Execute cc312 Hal Pal CC_BsvOTPWordWrite()
    VERIFICATION_APP_DEBUG_ID_CC312_HAL_PAL_ABORT = 0x12U, ///< Execute cc312 Hal Pal CC_PalAbort()
    VERIFICATION_APP_DEBUG_ID_CC312_HAL_PAL_COMPARE = 0x13U, ///< Execute cc312 Hal Pal CC_PalSecMemCmp()
    VERIFICATION_APP_DEBUG_ID_SET_WATCHDOG_DANGER_ZONE_SIZE = 0x14U, ///< Set watchdog/health monitor  danger zone size
    VERIFICATION_APP_DEBUG_ID_LIFECYCLE_MGR_AUTHORIZE_RMA = 0x15U, ///< Authorize RMA
    VERIFICATION_APP_DEBUG_ID_SYSTEM_DRV_GET_BOOT_OPTIONS = 0x16U, ///< Get boot options flags
    VERIFICATION_APP_DEBUG_ID_SYSTEM_MGR_PATCH_FUNCTIONS = 0x17U, ///< Execute functions intended for patch support
    VERIFICATION_APP_DEBUG_ID_SYSTEM_MGR_REQUEST_SHUTDOWN = 0x18U, ///< Request system shutdown
    VERIFICATION_APP_DEBUG_ID_SYSTEM_MGR_UNHANDLED_EVENT = 0x19U, ///< Execute unhandled event handler
    VERIFICATION_APP_DEBUG_ID_SYS_EXIT = 0x1AU, ///< Execute _sys_exit()
    VERIFICATION_APP_DEBUG_ID_SYS_TTY_CHR = 0x1BU, ///< Execute _ttywrch()
    VERIFICATION_APP_DEBUG_ID_NMI_HANDLER = 0x1CU, ///< Call to NMI_Handler()
    VERIFICATION_APP_DEBUG_ID_RESERVED_HANDLER = 0x1DU, ///< Call to Reserved_Handler()
    VERIFICATION_APP_DEBUG_ID_AESCMAC_STATUS = 0x1EU, ///< Modify return value for vcore status
    VERIFICATION_APP_DEBUG_ID_BAD_FUNCTION = 0x1FU, ///< Generate a HardFault by calling a function without the Thumb bit set
    VERIFICATION_APP_DEBUG_ID_UNALIGNED_ACCESS = 0x20U, ///< Generate a HardFault via an unaligned access
    VERIFICATION_APP_DEBUG_ID_PENDSV = 0x21U, ///< Set the aborted flag and trigger PendSV
    VERIFICATION_APP_DEBUG_ID_ILLEGAL_INSTRUCTION = 0x22U, ///< Generate a HardFault via an illegal instruction
    VERIFICATION_APP_DEBUG_ID_FW_LOCKUP = 0x23U, ///< Call a debug function that contains an infinite loop. Used for generating a watchdog timeout
    VERIFICATION_APP_DEBUG_ID_MPU_WRITE_START_ROM = 0x24U, ///< Generate a HardFault via write to start of ROM
    VERIFICATION_APP_DEBUG_ID_MPU_WRITE_END_ROM = 0x25U, ///< Generate a HardFault via write to end of ROM
    VERIFICATION_APP_DEBUG_ID_MPU_READ_END_ROM = 0x26U, ///< Generate a HardFault via read past end of ROM
    VERIFICATION_APP_DEBUG_ID_MPU_EXECUTE_END_ROM = 0x27U, ///< Generate a HardFault via execute past end of ROM
    VERIFICATION_APP_DEBUG_ID_MPU_EXECUTE_PATCH_RAM = 0x28U, ///< Generate a HardFault via execute from patch RAM
    VERIFICATION_APP_DEBUG_ID_MPU_EXECUTE_RAM = 0x29U, ///< Generate a HardFault via execute from data RAM
    VERIFICATION_APP_DEBUG_ID_MPU_READ_END_STACK = 0x2AU, ///< Generate a HardFault via read beyond the end of the stack
    VERIFICATION_APP_DEBUG_ID_MPU_READ_STACK_GUARD = 0x2BU, ///< Generate a HardFault via read within the stack guard
    VERIFICATION_APP_DEBUG_ID_MPU_EXECUTE_SHARED_MEM = 0x2CU, ///< Generate a HardFault via execute from ICore shared-memory
    VERIFICATION_APP_DEBUG_ID_MPU_READ_END_SHARED_MEM = 0x2DU, ///< Generate a HardFault via read beyond the end of the shared-memory
    VERIFICATION_APP_DEBUG_ID_MPU_EXECUTE_VCORE_ADDR = 0x2EU, ///< Generate a HardFault via execute from the VCore region
    VERIFICATION_APP_DEBUG_ID_MPU_READ_END_VCORE_ADDR = 0x2FU, ///< Generate a HardFault via read beyond the end of the Vcore region

    VERIFICATION_APP_DEBUG_ID_ERROR_RANGE = 0xFFU, ///< Error
} VerificationAppDebugIdT;

/// @} endgroup verificationapp
#endif  // !defined(SRC__VERIFICATIONAPP__SRC__VERIFICATION_APP_DEBUG_ID_H)

