;******************************************************************************
; Scatter-file for Cortex-M0+ bare-metal example
;
; This file describes the memory-map of the AR0820 ASIC (rev 2).
;
;******************************************************************************
; Copyright 2018 ON Semiconductor. All rights reserved. This software and/or
; documentation is licensed by ON Semiconductor under limited terms and
; conditions. The terms and conditions pertaining to the software and/or
; documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
; ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Software").
; Do not use this software and/or documentation unless you have carefully read
; and you agree to the limited terms and conditions. By using this software
; and/or documentation, you agree to the limited terms and conditions.
;******************************************************************************
PATCH_CODE_BLOCK 0x20000000 NOCOMPRESS 0xC000 
{
  PATCH_TABLE_LOADER +0
  {
    ; Make sure the patchFunctionTable is loacated First at address Zero (it is what the SVC handler expects)
    *.o (:gdef:*PatchedFunctionTable, +FIRST)
  }
  PATCH_CODE_LOADER +0
  {
    ; Adding the Loader code after the Table in case we want to recover this space (as it is only executed once)
    *.o (:gdef:*ComparatorTable)
    *PatchLoader.o (+RO-CODE)
  }
  PATCH_CODE +0
  {
    * (+RO-CODE)
  }
  PATCH_CODE_RW +0
  {
    * (+RW-CODE)
  }
  PATCH_DATA_CONST +0
  {
    * (+RO-DATA)
  }
  PATCH_DATA_RW +0
  {
    * (+RW-DATA)
  }
  PATCH_DATA_ZI +0
  {
    * (+ZI)
  }

  ; The following set of Regions need to match the Rom scatter file, so Patches can use the same linker symbols.

  ; The vectors are placed at the base of the ROM
  VECTORS 0 EMPTY 0xC0    		; maximum of 48 exceptions (48*4 bytes == 192 == 0xC0)
  {
  }

  CODE 0xC0 EMPTY 0x3FF40
  {
  }

  ; We allocate a nominal 4 Kbytes of data RAM
  ; Note as we run-from-ROM, data is copied into the data RAM by the start-up code
  DATA 0x2000C000 EMPTY 0x1000
  {
  }

  ; We allocate a nominal 8 Kbytes of heap
  ; - the heap is uninitialized as we assume its contents won't be read until they have
  ;   been written
  HEAP 0x2000D000 EMPTY 0x2000
  {
  }

  ; The Main Stack lives at the top of the available 64 Kbytes
  ; We reserve 4 Kbytes for the stack
  ; - its contents must be initialixed by the start-up code
  MAIN_STACK 0x2000F000 EMPTY 0x1000
  {
  }

  ; Control registers
  ; - note this region contains registers so its contents must be uninitialized
  ICORE_REGISTERS 0x3FFF0000 EMPTY 0x1000
  {
  }

  ; Shared-memory with the Host (via I2C)
  ; - note this region is ECC-protected, and can be read by host, so its contents
  ;   must be initialized by the start-up code
  SHARED_MEMORY 0x3FFF1000 EMPTY 0x1000
  {
  }
}

