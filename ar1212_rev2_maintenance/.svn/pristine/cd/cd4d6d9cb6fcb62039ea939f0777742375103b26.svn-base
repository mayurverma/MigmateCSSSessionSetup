#######################################################################################
# Copyright 2018 ON Semiconductor.  All rights reserved.
#
# This software and/or documentation is licensed by ON Semiconductor under limited
# terms and conditions.  The terms and conditions pertaining to the software and/or
# documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
# ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Softwar").
# Do not use this software and/or documentation unless you have carefully read and
# you agree to the limited terms and conditions.  By using this software and/or
# documentation, you agree to the limited terms and conditions.
########################################################################################
#
# Unittest for patch helper
#
########################################################################################
import unittest
from patch_helper import *

class TestPatchHelper(unittest.TestCase):

    patch_image = bytes(
    [0x00, 0x01,
    0x02, 0x03,
    0x04, 0x05,
    0x06, 0x07,
    0x08, 0x09,
    0x0A, 0x0B])

    def test_chunk(self):

        image = Chunk(0x10, 0x22, 0x20000000, 0x20000011, 4, self.patch_image)
        self.assertEqual(0x10, image.rom_version)
        self.assertEqual(0x22, image.patch_version)
        self.assertEqual(0x20000000, image.load_address)
        self.assertEqual(0x20000011, image.loader_address)
        self.assertEqual(4, image.max_chunk_size)
        self.assertEqual(3, len(image.chunks))
        for i in range(len(image.chunks)):
            self.assertEqual(image.chunks[i].data, self.patch_image[i*4:i*4+4])
            print(image.chunks[i])

        self.assertEqual(image.chunks[0].image(), bytes([0x10,  0x00,  0x22,  0x00,  0x02,  0x00,  0x00,  0x00,  0x00,
            0x00,  0x00,  0x20,  0x00,  0x00,  0x00,  0x00,  0x02,  0x00, 0x00,  0x00,  0x00,  0x01,  0x02,  0x03 ]))
        self.assertEqual(image.chunks[2].image(), bytes([0x10,  0x00,  0x22,  0x00,  0x02,  0x00,  0x02,  0x00,  0x08,
            0x00,  0x00,  0x20,  0x11,  0x00,  0x00,  0x20,  0x02,  0x00, 0x00,  0x00,  0x08,  0x09,  0x0a,  0x0b ]))


    def test_command(self):

        image = Chunk(0x10, 0x22, 0x20000000, 0x20000011, 4, self.patch_image)

        chunk = bytes([0x10,  0x00,  0x22,  0x00,  0x02,  0x00,  0x02,  0x00,  0x08,
            0x00,  0x00,  0x20,  0x11,  0x00,  0x00,  0x20,  0x02,  0x00, 0x00,  0x00,  0x08,  0x09,  0x0a,  0x0b ])

        for i in range(len(image.chunks)):
            self.assertEqual(0x00102200 + i, image.chunks[i].asset_id())

        cmd = Command().generate(image.chunks[0].asset_id(), image.chunks[0].image())
        print(cmd.image())
        self.assertEqual(cmd.image(), bytes([0x00,  0x22,  0x10,  0x00, 0xCC, 0xCC, 0xCC, 0xCC,
            0xBB, 0xBB, 0xBB, 0xBB, 0x20, 0x00, 0x00, 0x00,
            0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
            0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
            0x10, 0x00, 0x22, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ]))

if __name__ == "__main__":
    unittest.main()





