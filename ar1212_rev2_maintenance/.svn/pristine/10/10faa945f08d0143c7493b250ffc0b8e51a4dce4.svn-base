#ifndef CRYPTO_VCORE_H
#define CRYPTO_VCORE_H
//***********************************************************************************
/// \file
///
/// Hardware block register definitions.
///
//***********************************************************************************
// Copyright 2018 ON Semiconductor.  All rights reserved.
//
// This software and/or documentation is licensed by ON Semiconductor under limited
// terms and conditions. The terms and conditions pertaining to the software and/or
// documentation are available at http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf
// ("ON Semiconductor Standard Terms and Conditions of Sale, Section 8 Software").
// Do not use this software and/or documentation unless you have carefully read and
// you agree to the limited terms and conditions. By using this software and/or
// documentation, you agree to the limited terms and conditions.
//***********************************************************************************

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// DO NOT EDIT - This file is auto-generated by the generate_headers.py script
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//------------------------------------------------------------------------------
//                                  Constants
//------------------------------------------------------------------------------

// Register address definitions (offsets relative to register base)

#define CRYPTO_VCORE_SESSION_KEY0                          (CRYPTO_VCORE_REG_BASE + 0x0000U)
#define CRYPTO_VCORE_SESSION_KEY1                          (CRYPTO_VCORE_REG_BASE + 0x0004U)
#define CRYPTO_VCORE_SESSION_KEY2                          (CRYPTO_VCORE_REG_BASE + 0x0008U)
#define CRYPTO_VCORE_SESSION_KEY3                          (CRYPTO_VCORE_REG_BASE + 0x000CU)
#define CRYPTO_VCORE_SESSION_KEY4                          (CRYPTO_VCORE_REG_BASE + 0x0010U)
#define CRYPTO_VCORE_SESSION_KEY5                          (CRYPTO_VCORE_REG_BASE + 0x0014U)
#define CRYPTO_VCORE_SESSION_KEY6                          (CRYPTO_VCORE_REG_BASE + 0x0018U)
#define CRYPTO_VCORE_SESSION_KEY7                          (CRYPTO_VCORE_REG_BASE + 0x001CU)
#define CRYPTO_VCORE_IV0                                   (CRYPTO_VCORE_REG_BASE + 0x0020U)
#define CRYPTO_VCORE_IV1                                   (CRYPTO_VCORE_REG_BASE + 0x0024U)
#define CRYPTO_VCORE_IV2                                   (CRYPTO_VCORE_REG_BASE + 0x0028U)
#define CRYPTO_VCORE_IV3                                   (CRYPTO_VCORE_REG_BASE + 0x002CU)
#define CRYPTO_VCORE_GMAC0                                 (CRYPTO_VCORE_REG_BASE + 0x0080U)
#define CRYPTO_VCORE_GMAC1                                 (CRYPTO_VCORE_REG_BASE + 0x0084U)
#define CRYPTO_VCORE_GMAC2                                 (CRYPTO_VCORE_REG_BASE + 0x0088U)
#define CRYPTO_VCORE_GMAC3                                 (CRYPTO_VCORE_REG_BASE + 0x008CU)
#define CRYPTO_VCORE_CMAC0                                 (CRYPTO_VCORE_REG_BASE + 0x0090U)
#define CRYPTO_VCORE_CMAC1                                 (CRYPTO_VCORE_REG_BASE + 0x0094U)
#define CRYPTO_VCORE_CMAC2                                 (CRYPTO_VCORE_REG_BASE + 0x0098U)
#define CRYPTO_VCORE_CMAC3                                 (CRYPTO_VCORE_REG_BASE + 0x009CU)
#define CRYPTO_VCORE_CNFG                                  (CRYPTO_VCORE_REG_BASE + 0x0100U)
#define CRYPTO_VCORE_PACK_VAL_LO                           (CRYPTO_VCORE_REG_BASE + 0x0104U)
#define CRYPTO_VCORE_SPARE_REG22                           (CRYPTO_VCORE_REG_BASE + 0x0108U)
#define CRYPTO_VCORE_ROI_ROW_CNFG                          (CRYPTO_VCORE_REG_BASE + 0x010CU)
#define CRYPTO_VCORE_ROI_COL_CNFG                          (CRYPTO_VCORE_REG_BASE + 0x0110U)
#define CRYPTO_VCORE_ROI                                   (CRYPTO_VCORE_REG_BASE + 0x0114U)
#define CRYPTO_VCORE_ROI_FRAME_IDENT                       (CRYPTO_VCORE_REG_BASE + 0x0118U)
#define CRYPTO_VCORE_STRT_FRAME_IDENT                      (CRYPTO_VCORE_REG_BASE + 0x011CU)
#define CRYPTO_VCORE_AESHP_START                           (CRYPTO_VCORE_REG_BASE + 0x0120U)
#define CRYPTO_VCORE_AESHP_CNFG                            (CRYPTO_VCORE_REG_BASE + 0x0124U)
#define CRYPTO_VCORE_AESCMAC_START                         (CRYPTO_VCORE_REG_BASE + 0x0128U)
#define CRYPTO_VCORE_AESCMAC_CNFG                          (CRYPTO_VCORE_REG_BASE + 0x012CU)
#define CRYPTO_VCORE_AESCMAC_STATUS                        (CRYPTO_VCORE_REG_BASE + 0x0130U)
#define CRYPTO_VCORE_AESGMAC_STATUS                        (CRYPTO_VCORE_REG_BASE + 0x0134U)
#define CRYPTO_VCORE_ROI_STATUS                            (CRYPTO_VCORE_REG_BASE + 0x0138U)
#define CRYPTO_VCORE_SPARE_REG35                           (CRYPTO_VCORE_REG_BASE + 0x013CU)

// Register field definitions

#define CRYPTO_VCORE_SESSION_KEY0_SESSION_KEY0__SIZE       32U
#define CRYPTO_VCORE_SESSION_KEY0_SESSION_KEY0__SHIFT      0U
#define CRYPTO_VCORE_SESSION_KEY0_SESSION_KEY0__MASK       (((uint32_t)((1UL << CRYPTO_VCORE_SESSION_KEY0_SESSION_KEY0__SIZE) - 1U)) << CRYPTO_VCORE_SESSION_KEY0_SESSION_KEY0__SHIFT)

#define CRYPTO_VCORE_SESSION_KEY1_SESSION_KEY1__SIZE       32U
#define CRYPTO_VCORE_SESSION_KEY1_SESSION_KEY1__SHIFT      0U
#define CRYPTO_VCORE_SESSION_KEY1_SESSION_KEY1__MASK       (((uint32_t)((1UL << CRYPTO_VCORE_SESSION_KEY1_SESSION_KEY1__SIZE) - 1U)) << CRYPTO_VCORE_SESSION_KEY1_SESSION_KEY1__SHIFT)

#define CRYPTO_VCORE_SESSION_KEY2_SESSION_KEY2__SIZE       32U
#define CRYPTO_VCORE_SESSION_KEY2_SESSION_KEY2__SHIFT      0U
#define CRYPTO_VCORE_SESSION_KEY2_SESSION_KEY2__MASK       (((uint32_t)((1UL << CRYPTO_VCORE_SESSION_KEY2_SESSION_KEY2__SIZE) - 1U)) << CRYPTO_VCORE_SESSION_KEY2_SESSION_KEY2__SHIFT)

#define CRYPTO_VCORE_SESSION_KEY3_SESSION_KEY3__SIZE       32U
#define CRYPTO_VCORE_SESSION_KEY3_SESSION_KEY3__SHIFT      0U
#define CRYPTO_VCORE_SESSION_KEY3_SESSION_KEY3__MASK       (((uint32_t)((1UL << CRYPTO_VCORE_SESSION_KEY3_SESSION_KEY3__SIZE) - 1U)) << CRYPTO_VCORE_SESSION_KEY3_SESSION_KEY3__SHIFT)

#define CRYPTO_VCORE_SESSION_KEY4_SESSION_KEY4__SIZE       32U
#define CRYPTO_VCORE_SESSION_KEY4_SESSION_KEY4__SHIFT      0U
#define CRYPTO_VCORE_SESSION_KEY4_SESSION_KEY4__MASK       (((uint32_t)((1UL << CRYPTO_VCORE_SESSION_KEY4_SESSION_KEY4__SIZE) - 1U)) << CRYPTO_VCORE_SESSION_KEY4_SESSION_KEY4__SHIFT)

#define CRYPTO_VCORE_SESSION_KEY5_SESSION_KEY5__SIZE       32U
#define CRYPTO_VCORE_SESSION_KEY5_SESSION_KEY5__SHIFT      0U
#define CRYPTO_VCORE_SESSION_KEY5_SESSION_KEY5__MASK       (((uint32_t)((1UL << CRYPTO_VCORE_SESSION_KEY5_SESSION_KEY5__SIZE) - 1U)) << CRYPTO_VCORE_SESSION_KEY5_SESSION_KEY5__SHIFT)

#define CRYPTO_VCORE_SESSION_KEY6_SESSION_KEY6__SIZE       32U
#define CRYPTO_VCORE_SESSION_KEY6_SESSION_KEY6__SHIFT      0U
#define CRYPTO_VCORE_SESSION_KEY6_SESSION_KEY6__MASK       (((uint32_t)((1UL << CRYPTO_VCORE_SESSION_KEY6_SESSION_KEY6__SIZE) - 1U)) << CRYPTO_VCORE_SESSION_KEY6_SESSION_KEY6__SHIFT)

#define CRYPTO_VCORE_SESSION_KEY7_SESSION_KEY7__SIZE       32U
#define CRYPTO_VCORE_SESSION_KEY7_SESSION_KEY7__SHIFT      0U
#define CRYPTO_VCORE_SESSION_KEY7_SESSION_KEY7__MASK       (((uint32_t)((1UL << CRYPTO_VCORE_SESSION_KEY7_SESSION_KEY7__SIZE) - 1U)) << CRYPTO_VCORE_SESSION_KEY7_SESSION_KEY7__SHIFT)

#define CRYPTO_VCORE_IV0_IV0__SIZE                         32U
#define CRYPTO_VCORE_IV0_IV0__SHIFT                        0U
#define CRYPTO_VCORE_IV0_IV0__MASK                         (((uint32_t)((1UL << CRYPTO_VCORE_IV0_IV0__SIZE) - 1U)) << CRYPTO_VCORE_IV0_IV0__SHIFT)

#define CRYPTO_VCORE_IV1_IV1__SIZE                         32U
#define CRYPTO_VCORE_IV1_IV1__SHIFT                        0U
#define CRYPTO_VCORE_IV1_IV1__MASK                         (((uint32_t)((1UL << CRYPTO_VCORE_IV1_IV1__SIZE) - 1U)) << CRYPTO_VCORE_IV1_IV1__SHIFT)

#define CRYPTO_VCORE_IV2_IV2__SIZE                         32U
#define CRYPTO_VCORE_IV2_IV2__SHIFT                        0U
#define CRYPTO_VCORE_IV2_IV2__MASK                         (((uint32_t)((1UL << CRYPTO_VCORE_IV2_IV2__SIZE) - 1U)) << CRYPTO_VCORE_IV2_IV2__SHIFT)

#define CRYPTO_VCORE_IV3_IV3__SIZE                         32U
#define CRYPTO_VCORE_IV3_IV3__SHIFT                        0U
#define CRYPTO_VCORE_IV3_IV3__MASK                         (((uint32_t)((1UL << CRYPTO_VCORE_IV3_IV3__SIZE) - 1U)) << CRYPTO_VCORE_IV3_IV3__SHIFT)

#define CRYPTO_VCORE_GMAC0_GMAC0__SIZE                     32U
#define CRYPTO_VCORE_GMAC0_GMAC0__SHIFT                    0U
#define CRYPTO_VCORE_GMAC0_GMAC0__MASK                     (((uint32_t)((1UL << CRYPTO_VCORE_GMAC0_GMAC0__SIZE) - 1U)) << CRYPTO_VCORE_GMAC0_GMAC0__SHIFT)

#define CRYPTO_VCORE_GMAC1_GMAC1__SIZE                     32U
#define CRYPTO_VCORE_GMAC1_GMAC1__SHIFT                    0U
#define CRYPTO_VCORE_GMAC1_GMAC1__MASK                     (((uint32_t)((1UL << CRYPTO_VCORE_GMAC1_GMAC1__SIZE) - 1U)) << CRYPTO_VCORE_GMAC1_GMAC1__SHIFT)

#define CRYPTO_VCORE_GMAC2_GMAC2__SIZE                     32U
#define CRYPTO_VCORE_GMAC2_GMAC2__SHIFT                    0U
#define CRYPTO_VCORE_GMAC2_GMAC2__MASK                     (((uint32_t)((1UL << CRYPTO_VCORE_GMAC2_GMAC2__SIZE) - 1U)) << CRYPTO_VCORE_GMAC2_GMAC2__SHIFT)

#define CRYPTO_VCORE_GMAC3_GMAC3__SIZE                     32U
#define CRYPTO_VCORE_GMAC3_GMAC3__SHIFT                    0U
#define CRYPTO_VCORE_GMAC3_GMAC3__MASK                     (((uint32_t)((1UL << CRYPTO_VCORE_GMAC3_GMAC3__SIZE) - 1U)) << CRYPTO_VCORE_GMAC3_GMAC3__SHIFT)

#define CRYPTO_VCORE_CMAC0_CMAC0__SIZE                     32U
#define CRYPTO_VCORE_CMAC0_CMAC0__SHIFT                    0U
#define CRYPTO_VCORE_CMAC0_CMAC0__MASK                     (((uint32_t)((1UL << CRYPTO_VCORE_CMAC0_CMAC0__SIZE) - 1U)) << CRYPTO_VCORE_CMAC0_CMAC0__SHIFT)

#define CRYPTO_VCORE_CMAC1_CMAC1__SIZE                     32U
#define CRYPTO_VCORE_CMAC1_CMAC1__SHIFT                    0U
#define CRYPTO_VCORE_CMAC1_CMAC1__MASK                     (((uint32_t)((1UL << CRYPTO_VCORE_CMAC1_CMAC1__SIZE) - 1U)) << CRYPTO_VCORE_CMAC1_CMAC1__SHIFT)

#define CRYPTO_VCORE_CMAC2_CMAC2__SIZE                     32U
#define CRYPTO_VCORE_CMAC2_CMAC2__SHIFT                    0U
#define CRYPTO_VCORE_CMAC2_CMAC2__MASK                     (((uint32_t)((1UL << CRYPTO_VCORE_CMAC2_CMAC2__SIZE) - 1U)) << CRYPTO_VCORE_CMAC2_CMAC2__SHIFT)

#define CRYPTO_VCORE_CMAC3_CMAC3__SIZE                     32U
#define CRYPTO_VCORE_CMAC3_CMAC3__SHIFT                    0U
#define CRYPTO_VCORE_CMAC3_CMAC3__MASK                     (((uint32_t)((1UL << CRYPTO_VCORE_CMAC3_CMAC3__SIZE) - 1U)) << CRYPTO_VCORE_CMAC3_CMAC3__SHIFT)

#define CRYPTO_VCORE_CNFG_AESCMAC_EN__SIZE                 1U
#define CRYPTO_VCORE_CNFG_AESCMAC_EN__SHIFT                0U
#define CRYPTO_VCORE_CNFG_AESCMAC_EN__MASK                 (((uint32_t)((1UL << CRYPTO_VCORE_CNFG_AESCMAC_EN__SIZE) - 1U)) << CRYPTO_VCORE_CNFG_AESCMAC_EN__SHIFT)

#define CRYPTO_VCORE_CNFG_PACK_MODE__SIZE                  2U
#define CRYPTO_VCORE_CNFG_PACK_MODE__SHIFT                 1U
#define CRYPTO_VCORE_CNFG_PACK_MODE__MASK                  (((uint32_t)((1UL << CRYPTO_VCORE_CNFG_PACK_MODE__SIZE) - 1U)) << CRYPTO_VCORE_CNFG_PACK_MODE__SHIFT)

#define CRYPTO_VCORE_CNFG_PACK_ENABLE__SIZE                1U
#define CRYPTO_VCORE_CNFG_PACK_ENABLE__SHIFT               3U
#define CRYPTO_VCORE_CNFG_PACK_ENABLE__MASK                (((uint32_t)((1UL << CRYPTO_VCORE_CNFG_PACK_ENABLE__SIZE) - 1U)) << CRYPTO_VCORE_CNFG_PACK_ENABLE__SHIFT)

#define CRYPTO_VCORE_CNFG_SECURITY_PLL_REQ__SIZE           1U
#define CRYPTO_VCORE_CNFG_SECURITY_PLL_REQ__SHIFT          26U
#define CRYPTO_VCORE_CNFG_SECURITY_PLL_REQ__MASK           (((uint32_t)((1UL << CRYPTO_VCORE_CNFG_SECURITY_PLL_REQ__SIZE) - 1U)) << CRYPTO_VCORE_CNFG_SECURITY_PLL_REQ__SHIFT)

#define CRYPTO_VCORE_CNFG_AUTH_FRAME_START_EN__SIZE        1U
#define CRYPTO_VCORE_CNFG_AUTH_FRAME_START_EN__SHIFT       27U
#define CRYPTO_VCORE_CNFG_AUTH_FRAME_START_EN__MASK        (((uint32_t)((1UL << CRYPTO_VCORE_CNFG_AUTH_FRAME_START_EN__SIZE) - 1U)) << CRYPTO_VCORE_CNFG_AUTH_FRAME_START_EN__SHIFT)

#define CRYPTO_VCORE_CNFG_AUTH_AUTO_STRT_EN__SIZE          1U
#define CRYPTO_VCORE_CNFG_AUTH_AUTO_STRT_EN__SHIFT         28U
#define CRYPTO_VCORE_CNFG_AUTH_AUTO_STRT_EN__MASK          (((uint32_t)((1UL << CRYPTO_VCORE_CNFG_AUTH_AUTO_STRT_EN__SIZE) - 1U)) << CRYPTO_VCORE_CNFG_AUTH_AUTO_STRT_EN__SHIFT)

#define CRYPTO_VCORE_CNFG_CPU_VCORE_RESET__SIZE            1U
#define CRYPTO_VCORE_CNFG_CPU_VCORE_RESET__SHIFT           29U
#define CRYPTO_VCORE_CNFG_CPU_VCORE_RESET__MASK            (((uint32_t)((1UL << CRYPTO_VCORE_CNFG_CPU_VCORE_RESET__SIZE) - 1U)) << CRYPTO_VCORE_CNFG_CPU_VCORE_RESET__SHIFT)

#define CRYPTO_VCORE_CNFG_CPU_GMAC_RESET__SIZE             1U
#define CRYPTO_VCORE_CNFG_CPU_GMAC_RESET__SHIFT            30U
#define CRYPTO_VCORE_CNFG_CPU_GMAC_RESET__MASK             (((uint32_t)((1UL << CRYPTO_VCORE_CNFG_CPU_GMAC_RESET__SIZE) - 1U)) << CRYPTO_VCORE_CNFG_CPU_GMAC_RESET__SHIFT)

#define CRYPTO_VCORE_CNFG_CPU_CMAC_RESET__SIZE             1U
#define CRYPTO_VCORE_CNFG_CPU_CMAC_RESET__SHIFT            31U
#define CRYPTO_VCORE_CNFG_CPU_CMAC_RESET__MASK             (((uint32_t)((1UL << CRYPTO_VCORE_CNFG_CPU_CMAC_RESET__SIZE) - 1U)) << CRYPTO_VCORE_CNFG_CPU_CMAC_RESET__SHIFT)

#define CRYPTO_VCORE_PACK_VAL_LO_PACK_VAL_LO__SIZE         16U
#define CRYPTO_VCORE_PACK_VAL_LO_PACK_VAL_LO__SHIFT        0U
#define CRYPTO_VCORE_PACK_VAL_LO_PACK_VAL_LO__MASK         (((uint32_t)((1UL << CRYPTO_VCORE_PACK_VAL_LO_PACK_VAL_LO__SIZE) - 1U)) << CRYPTO_VCORE_PACK_VAL_LO_PACK_VAL_LO__SHIFT)

#define CRYPTO_VCORE_SPARE_REG22_SPARE_REG22__SIZE         32U
#define CRYPTO_VCORE_SPARE_REG22_SPARE_REG22__SHIFT        0U
#define CRYPTO_VCORE_SPARE_REG22_SPARE_REG22__MASK         (((uint32_t)((1UL << CRYPTO_VCORE_SPARE_REG22_SPARE_REG22__SIZE) - 1U)) << CRYPTO_VCORE_SPARE_REG22_SPARE_REG22__SHIFT)

#define CRYPTO_VCORE_ROI_ROW_CNFG_FIRST_ROW__SIZE          12U
#define CRYPTO_VCORE_ROI_ROW_CNFG_FIRST_ROW__SHIFT         0U
#define CRYPTO_VCORE_ROI_ROW_CNFG_FIRST_ROW__MASK          (((uint32_t)((1UL << CRYPTO_VCORE_ROI_ROW_CNFG_FIRST_ROW__SIZE) - 1U)) << CRYPTO_VCORE_ROI_ROW_CNFG_FIRST_ROW__SHIFT)

#define CRYPTO_VCORE_ROI_ROW_CNFG_LAST_ROW__SIZE           12U
#define CRYPTO_VCORE_ROI_ROW_CNFG_LAST_ROW__SHIFT          12U
#define CRYPTO_VCORE_ROI_ROW_CNFG_LAST_ROW__MASK           (((uint32_t)((1UL << CRYPTO_VCORE_ROI_ROW_CNFG_LAST_ROW__SIZE) - 1U)) << CRYPTO_VCORE_ROI_ROW_CNFG_LAST_ROW__SHIFT)

#define CRYPTO_VCORE_ROI_ROW_CNFG_ROW_SKIP__SIZE           8U
#define CRYPTO_VCORE_ROI_ROW_CNFG_ROW_SKIP__SHIFT          24U
#define CRYPTO_VCORE_ROI_ROW_CNFG_ROW_SKIP__MASK           (((uint32_t)((1UL << CRYPTO_VCORE_ROI_ROW_CNFG_ROW_SKIP__SIZE) - 1U)) << CRYPTO_VCORE_ROI_ROW_CNFG_ROW_SKIP__SHIFT)

#define CRYPTO_VCORE_ROI_COL_CNFG_FIRST_COL__SIZE          12U
#define CRYPTO_VCORE_ROI_COL_CNFG_FIRST_COL__SHIFT         0U
#define CRYPTO_VCORE_ROI_COL_CNFG_FIRST_COL__MASK          (((uint32_t)((1UL << CRYPTO_VCORE_ROI_COL_CNFG_FIRST_COL__SIZE) - 1U)) << CRYPTO_VCORE_ROI_COL_CNFG_FIRST_COL__SHIFT)

#define CRYPTO_VCORE_ROI_COL_CNFG_LAST_COL__SIZE           12U
#define CRYPTO_VCORE_ROI_COL_CNFG_LAST_COL__SHIFT          12U
#define CRYPTO_VCORE_ROI_COL_CNFG_LAST_COL__MASK           (((uint32_t)((1UL << CRYPTO_VCORE_ROI_COL_CNFG_LAST_COL__SIZE) - 1U)) << CRYPTO_VCORE_ROI_COL_CNFG_LAST_COL__SHIFT)

#define CRYPTO_VCORE_ROI_COL_CNFG_COL_SKIP__SIZE           8U
#define CRYPTO_VCORE_ROI_COL_CNFG_COL_SKIP__SHIFT          24U
#define CRYPTO_VCORE_ROI_COL_CNFG_COL_SKIP__MASK           (((uint32_t)((1UL << CRYPTO_VCORE_ROI_COL_CNFG_COL_SKIP__SIZE) - 1U)) << CRYPTO_VCORE_ROI_COL_CNFG_COL_SKIP__SHIFT)

#define CRYPTO_VCORE_ROI_ROI_MODE_EN__SIZE                 1U
#define CRYPTO_VCORE_ROI_ROI_MODE_EN__SHIFT                0U
#define CRYPTO_VCORE_ROI_ROI_MODE_EN__MASK                 (((uint32_t)((1UL << CRYPTO_VCORE_ROI_ROI_MODE_EN__SIZE) - 1U)) << CRYPTO_VCORE_ROI_ROI_MODE_EN__SHIFT)

#define CRYPTO_VCORE_ROI_ROI_INIT__SIZE                    1U
#define CRYPTO_VCORE_ROI_ROI_INIT__SHIFT                   1U
#define CRYPTO_VCORE_ROI_ROI_INIT__MASK                    (((uint32_t)((1UL << CRYPTO_VCORE_ROI_ROI_INIT__SIZE) - 1U)) << CRYPTO_VCORE_ROI_ROI_INIT__SHIFT)

#define CRYPTO_VCORE_ROI_ROI_FC_UPDATE__SIZE               1U
#define CRYPTO_VCORE_ROI_ROI_FC_UPDATE__SHIFT              2U
#define CRYPTO_VCORE_ROI_ROI_FC_UPDATE__MASK               (((uint32_t)((1UL << CRYPTO_VCORE_ROI_ROI_FC_UPDATE__SIZE) - 1U)) << CRYPTO_VCORE_ROI_ROI_FC_UPDATE__SHIFT)

#define CRYPTO_VCORE_ROI_FRAME_IDENT_ROI_FRAME_IDENT__SIZE 32U
#define CRYPTO_VCORE_ROI_FRAME_IDENT_ROI_FRAME_IDENT__SHIFT 0U
#define CRYPTO_VCORE_ROI_FRAME_IDENT_ROI_FRAME_IDENT__MASK (((uint32_t)((1UL << CRYPTO_VCORE_ROI_FRAME_IDENT_ROI_FRAME_IDENT__SIZE) - 1U)) << CRYPTO_VCORE_ROI_FRAME_IDENT_ROI_FRAME_IDENT__SHIFT)

#define CRYPTO_VCORE_STRT_FRAME_IDENT_STRT_FRAME_IDENT__SIZE 32U
#define CRYPTO_VCORE_STRT_FRAME_IDENT_STRT_FRAME_IDENT__SHIFT 0U
#define CRYPTO_VCORE_STRT_FRAME_IDENT_STRT_FRAME_IDENT__MASK (((uint32_t)((1UL << CRYPTO_VCORE_STRT_FRAME_IDENT_STRT_FRAME_IDENT__SIZE) - 1U)) << CRYPTO_VCORE_STRT_FRAME_IDENT_STRT_FRAME_IDENT__SHIFT)

#define CRYPTO_VCORE_AESHP_START_AESHP_START__SIZE         1U
#define CRYPTO_VCORE_AESHP_START_AESHP_START__SHIFT        0U
#define CRYPTO_VCORE_AESHP_START_AESHP_START__MASK         (((uint32_t)((1UL << CRYPTO_VCORE_AESHP_START_AESHP_START__SIZE) - 1U)) << CRYPTO_VCORE_AESHP_START_AESHP_START__SHIFT)

#define CRYPTO_VCORE_AESHP_START_AESHP_ABORT__SIZE         1U
#define CRYPTO_VCORE_AESHP_START_AESHP_ABORT__SHIFT        1U
#define CRYPTO_VCORE_AESHP_START_AESHP_ABORT__MASK         (((uint32_t)((1UL << CRYPTO_VCORE_AESHP_START_AESHP_ABORT__SIZE) - 1U)) << CRYPTO_VCORE_AESHP_START_AESHP_ABORT__SHIFT)

#define CRYPTO_VCORE_AESHP_CNFG_AESHP_AUTHMODE__SIZE       1U
#define CRYPTO_VCORE_AESHP_CNFG_AESHP_AUTHMODE__SHIFT      0U
#define CRYPTO_VCORE_AESHP_CNFG_AESHP_AUTHMODE__MASK       (((uint32_t)((1UL << CRYPTO_VCORE_AESHP_CNFG_AESHP_AUTHMODE__SIZE) - 1U)) << CRYPTO_VCORE_AESHP_CNFG_AESHP_AUTHMODE__SHIFT)

#define CRYPTO_VCORE_AESHP_CNFG_AESHP_ENCDEC__SIZE         1U
#define CRYPTO_VCORE_AESHP_CNFG_AESHP_ENCDEC__SHIFT        1U
#define CRYPTO_VCORE_AESHP_CNFG_AESHP_ENCDEC__MASK         (((uint32_t)((1UL << CRYPTO_VCORE_AESHP_CNFG_AESHP_ENCDEC__SIZE) - 1U)) << CRYPTO_VCORE_AESHP_CNFG_AESHP_ENCDEC__SHIFT)

#define CRYPTO_VCORE_AESHP_CNFG_AESHP_KEYSIZE__SIZE        2U
#define CRYPTO_VCORE_AESHP_CNFG_AESHP_KEYSIZE__SHIFT       2U
#define CRYPTO_VCORE_AESHP_CNFG_AESHP_KEYSIZE__MASK        (((uint32_t)((1UL << CRYPTO_VCORE_AESHP_CNFG_AESHP_KEYSIZE__SIZE) - 1U)) << CRYPTO_VCORE_AESHP_CNFG_AESHP_KEYSIZE__SHIFT)

#define CRYPTO_VCORE_AESCMAC_START_AESCMAC_START__SIZE     1U
#define CRYPTO_VCORE_AESCMAC_START_AESCMAC_START__SHIFT    0U
#define CRYPTO_VCORE_AESCMAC_START_AESCMAC_START__MASK     (((uint32_t)((1UL << CRYPTO_VCORE_AESCMAC_START_AESCMAC_START__SIZE) - 1U)) << CRYPTO_VCORE_AESCMAC_START_AESCMAC_START__SHIFT)

#define CRYPTO_VCORE_AESCMAC_START_AESCMAC_ABORT__SIZE     1U
#define CRYPTO_VCORE_AESCMAC_START_AESCMAC_ABORT__SHIFT    1U
#define CRYPTO_VCORE_AESCMAC_START_AESCMAC_ABORT__MASK     (((uint32_t)((1UL << CRYPTO_VCORE_AESCMAC_START_AESCMAC_ABORT__SIZE) - 1U)) << CRYPTO_VCORE_AESCMAC_START_AESCMAC_ABORT__SHIFT)

#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_AUTHMODE__SIZE   1U
#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_AUTHMODE__SHIFT  0U
#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_AUTHMODE__MASK   (((uint32_t)((1UL << CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_AUTHMODE__SIZE) - 1U)) << CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_AUTHMODE__SHIFT)

#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_ENCDEC__SIZE     1U
#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_ENCDEC__SHIFT    1U
#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_ENCDEC__MASK     (((uint32_t)((1UL << CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_ENCDEC__SIZE) - 1U)) << CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_ENCDEC__SHIFT)

#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_KEYSIZE__SIZE    2U
#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_KEYSIZE__SHIFT   2U
#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_KEYSIZE__MASK    (((uint32_t)((1UL << CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_KEYSIZE__SIZE) - 1U)) << CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_KEYSIZE__SHIFT)

#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_MODE__SIZE       4U
#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_MODE__SHIFT      4U
#define CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_MODE__MASK       (((uint32_t)((1UL << CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_MODE__SIZE) - 1U)) << CRYPTO_VCORE_AESCMAC_CNFG_AESCMAC_MODE__SHIFT)

#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_VALID__SIZE    1U
#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_VALID__SHIFT   0U
#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_VALID__MASK    (((uint32_t)((1UL << CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_VALID__SIZE) - 1U)) << CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_VALID__SHIFT)

#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_READY__SIZE    1U
#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_READY__SHIFT   1U
#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_READY__MASK    (((uint32_t)((1UL << CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_READY__SIZE) - 1U)) << CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_READY__SHIFT)

#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_GO__SIZE       1U
#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_GO__SHIFT      2U
#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_GO__MASK       (((uint32_t)((1UL << CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_GO__SIZE) - 1U)) << CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_GO__SHIFT)

#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_BUSY__SIZE     1U
#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_BUSY__SHIFT    3U
#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_BUSY__MASK     (((uint32_t)((1UL << CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_BUSY__SIZE) - 1U)) << CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_BUSY__SHIFT)

#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_MEMFULL__SIZE  1U
#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_MEMFULL__SHIFT 4U
#define CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_MEMFULL__MASK  (((uint32_t)((1UL << CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_MEMFULL__SIZE) - 1U)) << CRYPTO_VCORE_AESCMAC_STATUS_AESCMAC_MEMFULL__SHIFT)

#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_VALID__SIZE    1U
#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_VALID__SHIFT   0U
#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_VALID__MASK    (((uint32_t)((1UL << CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_VALID__SIZE) - 1U)) << CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_VALID__SHIFT)

#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_VALIDOUT__SIZE 1U
#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_VALIDOUT__SHIFT 1U
#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_VALIDOUT__MASK (((uint32_t)((1UL << CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_VALIDOUT__SIZE) - 1U)) << CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_VALIDOUT__SHIFT)

#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_INACCEPT__SIZE 1U
#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_INACCEPT__SHIFT 2U
#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_INACCEPT__MASK (((uint32_t)((1UL << CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_INACCEPT__SIZE) - 1U)) << CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_INACCEPT__SHIFT)

#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_DONE__SIZE     1U
#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_DONE__SHIFT    3U
#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_DONE__MASK     (((uint32_t)((1UL << CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_DONE__SIZE) - 1U)) << CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_DONE__SHIFT)

#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_BUSY__SIZE     1U
#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_BUSY__SHIFT    4U
#define CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_BUSY__MASK     (((uint32_t)((1UL << CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_BUSY__SIZE) - 1U)) << CRYPTO_VCORE_AESGMAC_STATUS_AESGMAC_BUSY__SHIFT)

#define CRYPTO_VCORE_ROI_STATUS_ROI_COL_END__SIZE          1U
#define CRYPTO_VCORE_ROI_STATUS_ROI_COL_END__SHIFT         0U
#define CRYPTO_VCORE_ROI_STATUS_ROI_COL_END__MASK          (((uint32_t)((1UL << CRYPTO_VCORE_ROI_STATUS_ROI_COL_END__SIZE) - 1U)) << CRYPTO_VCORE_ROI_STATUS_ROI_COL_END__SHIFT)

#define CRYPTO_VCORE_ROI_STATUS_ROI_ROW_END__SIZE          1U
#define CRYPTO_VCORE_ROI_STATUS_ROI_ROW_END__SHIFT         1U
#define CRYPTO_VCORE_ROI_STATUS_ROI_ROW_END__MASK          (((uint32_t)((1UL << CRYPTO_VCORE_ROI_STATUS_ROI_ROW_END__SIZE) - 1U)) << CRYPTO_VCORE_ROI_STATUS_ROI_ROW_END__SHIFT)

#define CRYPTO_VCORE_ROI_STATUS_ROI_COL_PARAM_ERR__SIZE    1U
#define CRYPTO_VCORE_ROI_STATUS_ROI_COL_PARAM_ERR__SHIFT   8U
#define CRYPTO_VCORE_ROI_STATUS_ROI_COL_PARAM_ERR__MASK    (((uint32_t)((1UL << CRYPTO_VCORE_ROI_STATUS_ROI_COL_PARAM_ERR__SIZE) - 1U)) << CRYPTO_VCORE_ROI_STATUS_ROI_COL_PARAM_ERR__SHIFT)

#define CRYPTO_VCORE_SPARE_REG35_SPARE_REG35__SIZE         32U
#define CRYPTO_VCORE_SPARE_REG35_SPARE_REG35__SHIFT        0U
#define CRYPTO_VCORE_SPARE_REG35_SPARE_REG35__MASK         (((uint32_t)((1UL << CRYPTO_VCORE_SPARE_REG35_SPARE_REG35__SIZE) - 1U)) << CRYPTO_VCORE_SPARE_REG35_SPARE_REG35__SHIFT)


//------------------------------------------------------------------------------
//                                  Types
//------------------------------------------------------------------------------

typedef struct
{
    __IOM uint32_t session_key0;
    __IOM uint32_t session_key1;
    __IOM uint32_t session_key2;
    __IOM uint32_t session_key3;
    __IOM uint32_t session_key4;
    __IOM uint32_t session_key5;
    __IOM uint32_t session_key6;
    __IOM uint32_t session_key7;
    __IOM uint32_t iv0;
    __IOM uint32_t iv1;
    __IOM uint32_t iv2;
    __IOM uint32_t iv3;
    __IM  uint32_t reserved1[20];
    __IOM uint32_t gmac0;
    __IOM uint32_t gmac1;
    __IOM uint32_t gmac2;
    __IOM uint32_t gmac3;
    __IOM uint32_t cmac0;
    __IOM uint32_t cmac1;
    __IOM uint32_t cmac2;
    __IOM uint32_t cmac3;
    __IM  uint32_t reserved2[24];
    __IOM uint32_t cnfg;
    __IOM uint32_t pack_val_lo;
    __IOM uint32_t spare_reg22;
    __IOM uint32_t roi_row_cnfg;
    __IOM uint32_t roi_col_cnfg;
    __IOM uint32_t roi;
    __IOM uint32_t roi_frame_ident;
    __IOM uint32_t strt_frame_ident;
    __IOM uint32_t aeshp_start;
    __IOM uint32_t aeshp_cnfg;
    __IOM uint32_t aescmac_start;
    __IOM uint32_t aescmac_cnfg;
    __IM  uint32_t aescmac_status;
    __IM  uint32_t aesgmac_status;
    __IM  uint32_t roi_status;
    __IOM uint32_t spare_reg35;
} CRYPTO_VCORE_REGS_T;

#endif /* CRYPTO_VCORE_H */
