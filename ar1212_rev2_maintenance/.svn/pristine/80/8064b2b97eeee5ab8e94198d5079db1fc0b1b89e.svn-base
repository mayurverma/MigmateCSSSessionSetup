#!/bin/env groovy

/* Build pipepline for AR0820 FW trunk-check */
pipeline {
    environment {
        MAILTO_DEVELOPERS = 'mike.brimer@onsemi.com, peter.hall@onsemi.com, richard.wrobel@onsemi.com, sergi.cami@onsemi.com, shide.wang@onsemi.com, steve.pearce@onsemi.com'
    }
    agent {
        node {
            label 'linux'
            customWorkspace '/ASD_DigReg/Projects/AR0820/Firmware/trunk-check'
        }
    }
    stages {
        stage('Build') {
            steps {
                task 'Update workspace'
                script {
                    BUILD_SVN_REVISION = checkout([$class: 'SubversionSCM',
                        additionalCredentials: [[credentialsId: '2e25eb9b-12d2-4634-83e9-90beb9e652fa',
                                                 realm: '<http://sjca-svn01.aptina.com:80> Subversion Repository']],
                        excludedCommitMessages: '',
                        excludedRegions: '',
                        excludedRevprop: '',
                        excludedUsers: '',
                        filterChangelog: false,
                        ignoreDirPropChanges: false,
                        includedRegions: '',
                        locations: [[cancelProcessOnExternalsFail: true,
                                     credentialsId: '2e25eb9b-12d2-4634-83e9-90beb9e652fa',
                                     depthOption: 'infinity',
                                     ignoreExternalsOption: false,
                                     local: '.',
                                     remote: 'http://sjca-svn01.aptina.com/svn/MIG/SE/AR0820_firmware/trunk']],
                        quietOperation: false,
                        workspaceUpdater: [$class: 'UpdateUpdater']]).SVN_REVISION
                    env.BUILD_SVN_REVISION = "${BUILD_SVN_REVISION}"
                    currentBuild.displayName = "#${BUILD_NUMBER}-r${BUILD_SVN_REVISION}"
                }
                
                task 'Clean workspace'
                sh '''
                    set +ex
                    source /tools/icad/MICE/etc/.bashrc_ukcad
                    cp -f /proj/AR0820/.cde_setup .
                    init_cde -silent
                    set -ex
                    make -r BUILD_CONFIG=barebones_armcc bare
                '''
                
                task 'Build system ROM'
                sh '''
                    set +ex
                    source /tools/icad/MICE/etc/.bashrc_ukcad
                    init_cde -silent
                    set -ex
                    bsub -Is make -r -C src/Rom BUILD_CONFIG=barebones_armcc BUILD_TYPE=release BUILD_ROM_VERSION=${BUILD_SVN_REVISION} bare dist
                '''
                archiveArtifacts artifacts: 'src/Rom/output/asic.armcc/CSS_Rom_*.zip*', fingerprint: true, onlyIfSuccessful: true
                
                task 'Build documentation'
                sh '''
                    set +ex
                    source /tools/icad/MICE/etc/.bashrc_ukcad
                    init_cde -silent
                    set -ex
                    make -r BUILD_CONFIG=barebones_armcc docs
                '''                
                publishHTML([allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: false,
                    reportDir: 'output/doc/html',
                    reportFiles: 'index.html',
                    reportName: 'Doxygen',
                    reportTitles: ''])   
            }
        }
        
        stage('Unit Test') {
            agent {
                label 'windows'
            }
            steps {
                task 'Update workspace'
                checkout changelog: false, poll: false, scm: [$class: 'SubversionSCM',
                    additionalCredentials: [[credentialsId: '2e25eb9b-12d2-4634-83e9-90beb9e652fa',
                                             realm: '<http://sjca-svn01.aptina.com:80> Subversion Repository']],
                    excludedCommitMessages: '',
                    excludedRegions: '',
                    excludedRevprop: '',
                    excludedUsers: '',
                    filterChangelog: false,
                    ignoreDirPropChanges: false,
                    includedRegions: '',
                    locations: [[cancelProcessOnExternalsFail: true,
                                 credentialsId: '2e25eb9b-12d2-4634-83e9-90beb9e652fa',
                                 depthOption: 'infinity',
                                 ignoreExternalsOption: false,
                                 local: '.',
                                 remote: "http://sjca-svn01.aptina.com/svn/MIG/SE/AR0820_firmware/trunk@${BUILD_SVN_REVISION}"]],
                    quietOperation: false,
                    workspaceUpdater: [$class: 'UpdateUpdater']]
                
                task 'Run Unit Tests'
                bat '''
                    call setenv.bat
                    make -r BUILD_CONFIG=cpputest_mingw32 BUILD_IGNORE_UNIT_TEST_ERRORS=1 bare unittest unittest-report
                '''
                archiveArtifacts artifacts: 'output/pc.mingw32/*.html', onlyIfSuccessful: true
                cobertura sourceEncoding: 'ASCII', zoomCoverageChart: false, maxNumberOfBuilds: 100,
                    onlyStable: false, autoUpdateHealth: false, autoUpdateStability: false,
                    coberturaReportFile: 'output/pc.mingw32/unittest_report.xml',
                    failUnhealthy: false, failUnstable: false,
                    conditionalCoverageTargets: '70, 0, 0',
                    lineCoverageTargets: '80, 0, 0',
                    methodCoverageTargets: '80, 0, 0'
            }
            post {
                always {
                    step([$class: 'JUnitResultArchiver', testResults: 'output/pc.mingw32/cpputest_*.xml'])
                }
            }
        }
        
        stage('Analysis') {
            steps {
                task 'Open Tasks'
                openTasks canComputeNew: false, canRunOnFailed: true,
                    defaultEncoding: '', excludePattern: '', healthy: '',
                    high: 'FIXME', low: '', normal: 'TODO',
                    pattern: 'inc/*.h, src/**/inc/*.h, src/**/src/*.c',
                    unHealthy: '', unstableTotalHigh: '0'

                task 'Check Code Style'
                sh '''
                    set +ex
                    source /tools/icad/MICE/etc/.bashrc_ukcad
                    init_cde -silent
                    set -ex
                    make -r BUILD_CONFIG=barebones_armcc BUILD_IGNORE_STYLE_VIOLATIONS=1 check-style
                '''
                checkstyle canComputeNew: false, defaultEncoding: '', healthy: '', pattern: 'output/asic.armcc/style_check_report.xml', unHealthy: '', unstableTotalAll: '0'
            }
        }
    }
    post {
        fixed {
            emailext mimeType: 'text/html',
                from: 'bnuk.jenkins@onsemi.com',
                replyTo: 'noreply@onsemi.com',
                to: "${MAILTO_DEVELOPERS}",
                subject: "Job AR0820 ${JOB_BASE_NAME} SUCCESS",
                body: '''${SCRIPT, template="groovy-html.template"}'''
        }
        failure {
            emailext mimeType: 'text/html',
                from: 'bnuk.jenkins@onsemi.com',
                replyTo: 'noreply@onsemi.com',
                to: "${MAILTO_DEVELOPERS}",
                subject: "Job AR0820 ${JOB_BASE_NAME} FAILURE (build is broken)",
                body: '''${SCRIPT, template="groovy-html.template"}'''
        }
        unstable {
            emailext mimeType: 'text/html',
                from: 'bnuk.jenkins@onsemi.com',
                replyTo: 'noreply@onsemi.com',
                to: "${MAILTO_DEVELOPERS}",
                subject: "Job AR0820 ${JOB_BASE_NAME} UNSTABLE (unit tests or quality checks failed)",
                body: '''${SCRIPT, template="groovy-html.template"}'''
       }
    }
}
